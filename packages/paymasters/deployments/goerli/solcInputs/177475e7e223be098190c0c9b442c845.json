{
  "language": "Solidity",
  "sources": {
    "contracts/AcceptEverythingPaymaster.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@opengsn/contracts/src/BasePaymaster.sol\";\n\n// accept everything.\n// this paymaster accepts any request.\n//\n// NOTE: Do NOT use this contract on a mainnet: it accepts anything, so anyone can \"grief\" it and drain its account\n\ncontract AcceptEverythingPaymaster is BasePaymaster {\n\n    function versionPaymaster() external view override virtual returns (string memory){\n        return \"3.0.0-beta.3+opengsn.accepteverything.ipaymaster\";\n    }\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    virtual\n    returns (bytes memory context, bool revertOnRecipientRevert) {\n        (relayRequest, signature, approvalData, maxPossibleGas);\n        return (\"\", false);\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    virtual {\n        (context, success, gasUseWithoutPost, relayData);\n    }\n\n}\n"
    },
    "@opengsn/contracts/src/BasePaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\nimport \"./utils/GsnTypes.sol\";\nimport \"./interfaces/IPaymaster.sol\";\nimport \"./interfaces/IRelayHub.sol\";\nimport \"./utils/GsnEip712Library.sol\";\nimport \"./forwarder/IForwarder.sol\";\n\n/**\n * @notice An abstract base class to be inherited by a concrete Paymaster.\n * A subclass must implement:\n *  - preRelayedCall\n *  - postRelayedCall\n */\nabstract contract BasePaymaster is IPaymaster, Ownable, ERC165 {\n    using ERC165Checker for address;\n\n    IRelayHub internal relayHub;\n    address private _trustedForwarder;\n\n    /// @inheritdoc IPaymaster\n    function getRelayHub() public override view returns (address) {\n        return address(relayHub);\n    }\n\n    //overhead of forwarder verify+signature, plus hub overhead.\n    uint256 constant public FORWARDER_HUB_OVERHEAD = 50000;\n\n    //These parameters are documented in IPaymaster.GasAndDataLimits\n    uint256 constant public PRE_RELAYED_CALL_GAS_LIMIT = 100000;\n    uint256 constant public POST_RELAYED_CALL_GAS_LIMIT = 110000;\n    uint256 constant public PAYMASTER_ACCEPTANCE_BUDGET = PRE_RELAYED_CALL_GAS_LIMIT + FORWARDER_HUB_OVERHEAD;\n    uint256 constant public CALLDATA_SIZE_LIMIT = 10500;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IPaymaster).interfaceId ||\n            interfaceId == type(Ownable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IPaymaster\n    function getGasAndDataLimits()\n    public\n    override\n    virtual\n    view\n    returns (\n        IPaymaster.GasAndDataLimits memory limits\n    ) {\n        return IPaymaster.GasAndDataLimits(\n            PAYMASTER_ACCEPTANCE_BUDGET,\n            PRE_RELAYED_CALL_GAS_LIMIT,\n            POST_RELAYED_CALL_GAS_LIMIT,\n            CALLDATA_SIZE_LIMIT\n        );\n    }\n\n    /**\n     * @notice this method must be called from preRelayedCall to validate that the forwarder\n     * is approved by the paymaster as well as by the recipient contract.\n     */\n    function _verifyForwarder(GsnTypes.RelayRequest calldata relayRequest)\n    internal\n    virtual\n    view\n    {\n        require(getTrustedForwarder() == relayRequest.relayData.forwarder, \"Forwarder is not trusted\");\n        GsnEip712Library.verifyForwarderTrusted(relayRequest);\n    }\n\n    function _verifyRelayHubOnly() internal virtual view {\n        require(msg.sender == getRelayHub(), \"can only be called by RelayHub\");\n    }\n\n    function _verifyValue(GsnTypes.RelayRequest calldata relayRequest) internal virtual view{\n        require(relayRequest.request.value == 0, \"value transfer not supported\");\n    }\n\n    function _verifyPaymasterData(GsnTypes.RelayRequest calldata relayRequest) internal virtual view {\n        require(relayRequest.relayData.paymasterData.length == 0, \"should have no paymasterData\");\n    }\n\n    function _verifyApprovalData(bytes calldata approvalData) internal virtual view{\n        require(approvalData.length == 0, \"should have no approvalData\");\n    }\n\n    /**\n     * @notice The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with.\n     * :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first.\n     */\n    function setRelayHub(IRelayHub hub) public onlyOwner {\n        require(address(hub).supportsInterface(type(IRelayHub).interfaceId), \"target is not a valid IRelayHub\");\n        relayHub = hub;\n    }\n\n    /**\n     * @notice The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.\n     * @notice the Recipients must trust this Forwarder as well in order for the configuration to remain functional.\n     */\n    function setTrustedForwarder(address forwarder) public virtual onlyOwner {\n        require(forwarder.supportsInterface(type(IForwarder).interfaceId), \"target is not a valid IForwarder\");\n        _trustedForwarder = forwarder;\n    }\n\n    function getTrustedForwarder() public virtual view override returns (address){\n        return _trustedForwarder;\n    }\n\n    /**\n     * @notice Any native Ether transferred into the paymaster is transferred as a deposit to the RelayHub.\n     * This way, we don't need to understand the RelayHub API in order to replenish the paymaster.\n     */\n    receive() external virtual payable {\n        require(address(relayHub) != address(0), \"relay hub address not set\");\n        relayHub.depositFor{value:msg.value}(address(this));\n    }\n\n    /**\n     * @notice Withdraw deposit from the RelayHub.\n     * @param amount The amount to be subtracted from the sender.\n     * @param target The target to which the amount will be transferred.\n     */\n    function withdrawRelayHubDepositTo(uint256 amount, address payable target) public onlyOwner {\n        relayHub.withdraw(target, amount);\n    }\n\n    /// @inheritdoc IPaymaster\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    override\n    returns (bytes memory, bool) {\n        _verifyRelayHubOnly();\n        _verifyForwarder(relayRequest);\n        _verifyValue(relayRequest);\n        _verifyPaymasterData(relayRequest);\n        _verifyApprovalData(approvalData);\n        return _preRelayedCall(relayRequest, signature, approvalData, maxPossibleGas);\n    }\n\n\n    /**\n     * @notice internal logic the paymasters need to provide to select which transactions they are willing to pay for\n     * @notice see the documentation for `IPaymaster::preRelayedCall` for details\n     */\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata,\n        bytes calldata,\n        bytes calldata,\n        uint256\n    )\n    internal\n    virtual\n    returns (bytes memory, bool);\n\n    /// @inheritdoc IPaymaster\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    external\n    override\n    {\n        _verifyRelayHubOnly();\n        _postRelayedCall(context, success, gasUseWithoutPost, relayData);\n    }\n\n    /**\n     * @notice internal logic the paymasters need to provide if they need to take some action after the transaction\n     * @notice see the documentation for `IPaymaster::postRelayedCall` for details\n     */\n    function _postRelayedCall(\n        bytes calldata,\n        bool,\n        uint256,\n        GsnTypes.RelayData calldata\n    )\n    internal\n    virtual;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@opengsn/contracts/src/utils/GsnTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../forwarder/IForwarder.sol\";\n\ninterface GsnTypes {\n    /// @notice maxFeePerGas, maxPriorityFeePerGas, pctRelayFee and baseRelayFee must be validated inside of the paymaster's preRelayedCall in order not to overpay\n    struct RelayData {\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n        uint256 transactionCalldataGasUsed;\n        address relayWorker;\n        address paymaster;\n        address forwarder;\n        bytes paymasterData;\n        uint256 clientId;\n    }\n\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\n    struct RelayRequest {\n        IForwarder.ForwardRequest request;\n        RelayData relayData;\n    }\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IPaymaster.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/interfaces/IERC165.sol\";\n\nimport \"../utils/GsnTypes.sol\";\n\n/**\n * @title The Paymaster Interface\n * @notice Contracts implementing this interface exist to make decision about paying the transaction fee to the relay.\n *\n * @notice There are two callbacks here that are executed by the RelayHub: `preRelayedCall` and `postRelayedCall`.\n *\n * @notice It is recommended that your implementation inherits from the abstract BasePaymaster contract.\n*/\ninterface IPaymaster is IERC165 {\n    /**\n     * @notice The limits this Paymaster wants to be imposed by the RelayHub on user input. See `getGasAndDataLimits`.\n     */\n    struct GasAndDataLimits {\n        uint256 acceptanceBudget;\n        uint256 preRelayedCallGasLimit;\n        uint256 postRelayedCallGasLimit;\n        uint256 calldataSizeLimit;\n    }\n\n    /**\n     * @notice Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster.\n     * This function allows different paymasters to have different properties without changes to the RelayHub.\n     * @return limits An instance of the `GasAndDataLimits` struct\n     *\n     * ##### `acceptanceBudget`\n     * If the transactions consumes more than `acceptanceBudget` this Paymaster will be charged for gas no matter what.\n     * Transaction that gets rejected after consuming more than `acceptanceBudget` gas is on this Paymaster's expense.\n     *\n     * Should be set to an amount gas this Paymaster expects to spend deciding whether to accept or reject a request.\n     * This includes gas consumed by calculations in the `preRelayedCall`, `Forwarder` and the recipient contract.\n     *\n     * :warning: **Warning** :warning: As long this value is above `preRelayedCallGasLimit`\n     * (see defaults in `BasePaymaster`), the Paymaster is guaranteed it will never pay for rejected transactions.\n     * If this value is below `preRelayedCallGasLimit`, it might might make Paymaster open to a \"griefing\" attack.\n     *\n     * The relayers should prefer lower `acceptanceBudget`, as it improves their chances of being compensated.\n     * From a Relay's point of view, this is the highest gas value a bad Paymaster may cost the relay,\n     * since the paymaster will pay anything above that value regardless of whether the transaction succeeds or reverts.\n     * Specifying value too high might make the call rejected by relayers (see `maxAcceptanceBudget` in server config).\n     *\n     * ##### `preRelayedCallGasLimit`\n     * The max gas usage of preRelayedCall. Any revert of the `preRelayedCall` is a request rejection by the paymaster.\n     * As long as `acceptanceBudget` is above `preRelayedCallGasLimit`, any such revert is not payed by the paymaster.\n     *\n     * ##### `postRelayedCallGasLimit`\n     * The max gas usage of postRelayedCall. The Paymaster is not charged for the maximum, only for actually used gas.\n     * Note that an OOG will revert the inner transaction, but the paymaster will be charged for it anyway.\n     */\n    function getGasAndDataLimits()\n    external\n    view\n    returns (\n        GasAndDataLimits memory limits\n    );\n\n    /**\n     * @notice :warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions.\n     * @return trustedForwarder The address of the `Forwarder` that is trusted by this Paymaster to execute the requests.\n     */\n    function getTrustedForwarder() external view returns (address trustedForwarder);\n\n    /**\n     * @return relayHub The address of the `RelayHub` that is trusted by this Paymaster to execute the requests.\n     */\n    function getRelayHub() external view returns (address relayHub);\n\n    /**\n     * @notice Called by the Relay in view mode and later by the `RelayHub` on-chain to validate that\n     * the Paymaster agrees to pay for this call.\n     *\n     * The request is considered to be rejected by the Paymaster in one of the following conditions:\n     *  - `preRelayedCall()` method reverts\n     *  - the `Forwarder` reverts because of nonce or signature error\n     *  - the `Paymaster` returned `rejectOnRecipientRevert: true` and the recipient contract reverted\n     *    (and all that did not consume more than `acceptanceBudget` gas).\n     *\n     * In any of the above cases, all Paymaster calls and the recipient call are reverted.\n     * In any other case the Paymaster will pay for the gas cost of the transaction.\n     * Note that even if `postRelayedCall` is reverted the Paymaster will be charged.\n     *\n\n     * @param relayRequest - the full relay request structure\n     * @param signature - user's EIP712-compatible signature of the `relayRequest`.\n     * Note that in most cases the paymaster shouldn't try use it at all. It is always checked\n     * by the forwarder immediately after preRelayedCall returns.\n     * @param approvalData - extra dapp-specific data (e.g. signature from trusted party)\n     * @param maxPossibleGas - based on values returned from `getGasAndDataLimits`\n     * the RelayHub will calculate the maximum possible amount of gas the user may be charged for.\n     * In order to convert this value to wei, the Paymaster has to call \"relayHub.calculateCharge()\"\n     *\n     * @return context\n     * A byte array to be passed to postRelayedCall.\n     * Can contain any data needed by this Paymaster in any form or be empty if no extra data is needed.\n     * @return rejectOnRecipientRevert\n     * The flag that allows a Paymaster to \"delegate\" the rejection to the recipient code.\n     * It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,\n     * forwarder check and recipient checks must fit into the GasLimits.acceptanceBudget,\n     * otherwise the TX is paid by the Paymaster.\n     * `true` if the Paymaster wants to reject the TX if the recipient reverts.\n     * `false` if the Paymaster wants rejects by the recipient to be completed on chain and paid by the Paymaster.\n     */\n    function preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    returns (bytes memory context, bool rejectOnRecipientRevert);\n\n    /**\n     * @notice This method is called after the actual relayed function call.\n     * It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call.\n     *\n     * Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster\n     * is still committed to pay the relay for the entire transaction.\n     *\n     * @param context The call context, as returned by the preRelayedCall\n     * @param success `true` if the relayed call succeeded, false if it reverted\n     * @param gasUseWithoutPost The actual amount of gas used by the entire transaction, EXCEPT\n     *        the gas used by the postRelayedCall itself.\n     * @param relayData The relay params of the request. can be used by relayHub.calculateCharge()\n     *\n     */\n    function postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    ) external;\n\n    /**\n     * @return version The SemVer string of this Paymaster's version.\n     */\n    function versionPaymaster() external view returns (string memory);\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IRelayHub.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/interfaces/IERC165.sol\";\n\nimport \"../utils/GsnTypes.sol\";\nimport \"./IStakeManager.sol\";\n\n/**\n * @title The RelayHub interface\n * @notice The implementation of this interface provides all the information the GSN client needs to\n * create a valid `RelayRequest` and also serves as an entry point for such requests.\n *\n * @notice The RelayHub also handles all the related financial records and hold the balances of participants.\n * The Paymasters keep their Ether deposited in the `RelayHub` in order to pay for the `RelayRequest`s that thay choose\n * to pay for, and Relay Servers keep their earned Ether in the `RelayHub` until they choose to `withdraw()`\n *\n * @notice The RelayHub on each supported network only needs a single instance and there is usually no need for dApp\n * developers or Relay Server operators to redeploy, reimplement, modify or override the `RelayHub`.\n */\ninterface IRelayHub is IERC165 {\n    /**\n     * @notice A struct that contains all the parameters of the `RelayHub` that can be modified after the deployment.\n     */\n    struct RelayHubConfig {\n        // maximum number of worker accounts allowed per manager\n        uint256 maxWorkerCount;\n        // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\n        uint256 gasReserve;\n        // Gas overhead to calculate gasUseWithoutPost\n        uint256 postOverhead;\n        // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\n        // Assume that relay has non-zero balance (costs 15'000 more otherwise).\n        uint256 gasOverhead;\n        // Minimum unstake delay seconds of a relay manager's stake on the StakeManager\n        uint256 minimumUnstakeDelay;\n        // Developers address\n        address devAddress;\n        // 0 < fee < 100, as percentage of total charge from paymaster to relayer\n        uint8 devFee;\n        // baseRelayFee The base fee the Relay Server charges for a single transaction in Ether, in wei.\n        uint80 baseRelayFee;\n        // pctRelayFee The percent of the total charge to add as a Relay Server fee to the total charge.\n        uint16 pctRelayFee;\n    }\n\n    /// @notice Emitted when a configuration of the `RelayHub` is changed\n    event RelayHubConfigured(RelayHubConfig config);\n\n    /// @notice Emitted when relays are added by a relayManager\n    event RelayWorkersAdded(\n        address indexed relayManager,\n        address[] newRelayWorkers,\n        uint256 workersCount\n    );\n\n    /// @notice Emitted when an account withdraws funds from the `RelayHub`.\n    event Withdrawn(\n        address indexed account,\n        address indexed dest,\n        uint256 amount\n    );\n\n    /// @notice Emitted when `depositFor` is called, including the amount and account that was funded.\n    event Deposited(\n        address indexed paymaster,\n        address indexed from,\n        uint256 amount\n    );\n\n    /// @notice Emitted for each token configured for staking in setMinimumStakes\n    event StakingTokenDataChanged(\n        address token,\n        uint256 minimumStake\n    );\n\n    /**\n     * @notice Emitted when an attempt to relay a call fails and the `Paymaster` does not accept the transaction.\n     * The actual relayed call was not executed, and the recipient not charged.\n     * @param reason contains a revert reason returned from preRelayedCall or forwarder.\n     */\n    event TransactionRejectedByPaymaster(\n        address indexed relayManager,\n        address indexed paymaster,\n        bytes32 indexed relayRequestID,\n        address from,\n        address to,\n        address relayWorker,\n        bytes4 selector,\n        uint256 innerGasUsed,\n        bytes reason\n    );\n\n    /**\n     * @notice Emitted when a transaction is relayed. Note that the actual internal function call might be reverted.\n     * The reason for a revert will be indicated in the `status` field of a corresponding `RelayCallStatus` value.\n     * @notice `charge` is the Ether value deducted from the `Paymaster` balance.\n     * The amount added to the `relayManager` balance will be lower if there is an activated `devFee` in the `config`.\n     */\n    event TransactionRelayed(\n        address indexed relayManager,\n        address indexed relayWorker,\n        bytes32 indexed relayRequestID,\n        address from,\n        address to,\n        address paymaster,\n        bytes4 selector,\n        RelayCallStatus status,\n        uint256 charge\n    );\n\n    /// @notice This event is emitted in case the internal function returns a value or reverts with a revert string.\n    event TransactionResult(\n        RelayCallStatus status,\n        bytes returnValue\n    );\n\n    /// @notice This event is emitted in case this `RelayHub` is deprecated and will stop serving transactions soon.\n    event HubDeprecated(uint256 deprecationTime);\n\n    /**\n     * @notice This event is emitted in case a `relayManager` has been deemed \"abandoned\" for being\n     * unresponsive for a prolonged period of time.\n     * @notice This event means the entire balance of the relay has been transferred to the `devAddress`.\n     */\n    event AbandonedRelayManagerBalanceEscheated(\n        address indexed relayManager,\n        uint256 balance\n    );\n\n    /**\n     * Error codes that describe all possible failure reasons reported in the `TransactionRelayed` event `status` field.\n     *  @param OK The transaction was successfully relayed and execution successful - never included in the event.\n     *  @param RelayedCallFailed The transaction was relayed, but the relayed call failed.\n     *  @param RejectedByPreRelayed The transaction was not relayed due to preRelatedCall reverting.\n     *  @param RejectedByForwarder The transaction was not relayed due to forwarder check (signature,nonce).\n     *  @param PostRelayedFailed The transaction was relayed and reverted due to postRelatedCall reverting.\n     *  @param PaymasterBalanceChanged The transaction was relayed and reverted due to the paymaster balance change.\n     */\n    enum RelayCallStatus {\n        OK,\n        RelayedCallFailed,\n        RejectedByPreRelayed,\n        RejectedByForwarder,\n        RejectedByRecipientRevert,\n        PostRelayedFailed,\n        PaymasterBalanceChanged\n    }\n\n    /**\n     * @notice Add new worker addresses controlled by the sender who must be a staked Relay Manager address.\n     * Emits a `RelayWorkersAdded` event.\n     * This function can be called multiple times, emitting new events.\n     */\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\n\n    /**\n     * @notice The `RelayRegistrar` callback to notify the `RelayHub` that this `relayManager` has updated registration.\n     */\n    function onRelayServerRegistered(address relayManager) external;\n\n    // Balance management\n\n    /**\n     * @notice Deposits ether for a `Paymaster`, so that it can and pay for relayed transactions.\n     * :warning: **Warning** :warning: Unused balance can only be withdrawn by the holder itself, by calling `withdraw`.\n     * Emits a `Deposited` event.\n     */\n    function depositFor(address target) external payable;\n\n    /**\n     * @notice Withdraws from an account's balance, sending it back to the caller.\n     * Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding.\n     * Emits a `Withdrawn` event.\n     */\n    function withdraw(address payable dest, uint256 amount) external;\n\n    /**\n     * @notice Withdraws from an account's balance, sending funds to multiple provided addresses.\n     * Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding.\n     * Emits a `Withdrawn` event for each destination.\n     */\n    function withdrawMultiple(address payable[] memory dest, uint256[] memory amount) external;\n\n    // Relaying\n\n\n    /**\n     * @notice Relays a transaction. For this to succeed, multiple conditions must be met:\n     *  - `Paymaster`'s `preRelayCall` method must succeed and not revert.\n     *  - the `msg.sender` must be a registered Relay Worker that the user signed to use.\n     *  - the transaction's gas fees must be equal or larger than the ones that were signed by the sender.\n     *  - the transaction must have enough gas to run all internal transactions if they use all gas available to them.\n     *  - the `Paymaster` must have enough balance to pay the Relay Worker if all gas is spent.\n     *\n     * @notice If all conditions are met, the call will be relayed and the `Paymaster` charged.\n     *\n     * @param domainSeparatorName The name of the Domain Separator used to verify the EIP-712 signature\n     * @param maxAcceptanceBudget The maximum valid value for `paymaster.getGasLimits().acceptanceBudget` to return.\n     * @param relayRequest All details of the requested relayed call.\n     * @param signature The client's EIP-712 signature over the `relayRequest` struct.\n     * @param approvalData The dapp-specific data forwarded to the `Paymaster`'s `preRelayedCall` method.\n     * This value is **not** verified by the `RelayHub` in any way.\n     * As an example, it can be used to pass some kind of a third-party signature to the `Paymaster` for verification.\n     *\n     * Emits a `TransactionRelayed` event regardless of whether the transaction succeeded or failed.\n     */\n    function relayCall(\n        string calldata domainSeparatorName,\n        uint256 maxAcceptanceBudget,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData\n    )\n    external\n    returns (\n        bool paymasterAccepted,\n        uint256 charge,\n        IRelayHub.RelayCallStatus status,\n        bytes memory returnValue\n    );\n\n    /**\n     * @notice In case the Relay Worker has been found to be in violation of some rules by the `Penalizer` contract,\n     * the `Penalizer` will call this method to execute a penalization.\n     * The `RelayHub` will look up the Relay Manager of the given Relay Worker and will forward the call to\n     * the `StakeManager` contract. The `RelayHub` does not perform the actual penalization either.\n     * @param relayWorker The address of the Relay Worker that committed a penalizable offense.\n     * @param beneficiary The address that called the `Penalizer` and will receive a reward for it.\n     */\n    function penalize(address relayWorker, address payable beneficiary) external;\n\n    /**\n     * @notice Sets or changes the configuration of this `RelayHub`.\n     * @param _config The new configuration.\n     */\n    function setConfiguration(RelayHubConfig memory _config) external;\n\n    /**\n     * @notice Sets or changes the minimum amount of a given `token` that needs to be staked so that the Relay Manager\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\n     * @param token An array of addresses of ERC-20 compatible tokens.\n     * @param minimumStake An array of minimal amounts necessary for a corresponding token, in wei.\n     */\n    function setMinimumStakes(IERC20[] memory token, uint256[] memory minimumStake) external;\n\n    /**\n     * @notice Deprecate hub by reverting all incoming `relayCall()` calls starting from a given timestamp\n     * @param _deprecationTime The timestamp in seconds after which the `RelayHub` stops serving transactions.\n     */\n    function deprecateHub(uint256 _deprecationTime) external;\n\n    /**\n     * @notice\n     * @param relayManager\n     */\n    function escheatAbandonedRelayBalance(address relayManager) external;\n\n    /**\n     * @notice The fee is expressed as a base fee in wei plus percentage of the actual charge.\n     * For example, a value '40' stands for a 40% fee, so the recipient will be charged for 1.4 times the spent amount.\n     * @param gasUsed An amount of gas used by the transaction.\n     * @param relayData The details of a transaction signed by the sender.\n     * @return The calculated charge, in wei.\n     */\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\n\n    /**\n     * @notice The fee is expressed as a  percentage of the actual charge.\n     * For example, a value '40' stands for a 40% fee, so the Relay Manager will only get 60% of the `charge`.\n     * @param charge The amount of Ether in wei the Paymaster will be charged for this transaction.\n     * @return The calculated devFee, in wei.\n     */\n    function calculateDevCharge(uint256 charge) external view returns (uint256);\n    /* getters */\n\n    /// @return config The configuration of the `RelayHub`.\n    function getConfiguration() external view returns (RelayHubConfig memory config);\n\n    /**\n     * @param token An address of an ERC-20 compatible tokens.\n     * @return The minimum amount of a given `token` that needs to be staked so that the Relay Manager\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\n     */\n    function getMinimumStakePerToken(IERC20 token) external view returns (uint256);\n\n    /**\n     * @param worker An address of the Relay Worker.\n     * @return The address of its Relay Manager.\n     */\n    function getWorkerManager(address worker) external view returns (address);\n\n    /**\n     * @param manager An address of the Relay Manager.\n     * @return The count of Relay Workers associated with this Relay Manager.\n     */\n    function getWorkerCount(address manager) external view returns (uint256);\n\n    /// @return An account's balance. It can be either a deposit of a `Paymaster`, or a revenue of a Relay Manager.\n    function balanceOf(address target) external view returns (uint256);\n\n    /// @return The `StakeManager` address for this `RelayHub`.\n    function getStakeManager() external view returns (IStakeManager);\n\n    /// @return The `Penalizer` address for this `RelayHub`.\n    function getPenalizer() external view returns (address);\n\n    /// @return The `RelayRegistrar` address for this `RelayHub`.\n    function getRelayRegistrar() external view returns (address);\n\n    /// @return The `BatchGateway` address for this `RelayHub`.\n    function getBatchGateway() external view returns (address);\n\n    /**\n     * @notice Uses `StakeManager` to decide if the Relay Manager can be considered staked or not.\n     * Returns if the stake's token, amount and delay satisfy all requirements, reverts otherwise.\n     */\n    function verifyRelayManagerStaked(address relayManager) external view;\n\n    /**\n     * @notice Uses `StakeManager` to check if the Relay Manager can be considered abandoned or not.\n     * Returns true if the stake's abandonment time is in the past including the escheatment delay, false otherwise.\n     */\n    function isRelayEscheatable(address relayManager) external view returns (bool);\n\n    /// @return `true` if the `RelayHub` is deprecated, `false` it it is not deprecated and can serve transactions.\n    function isDeprecated() external view returns (bool);\n\n    /// @return The timestamp from which the hub no longer allows relaying calls.\n    function getDeprecationTime() external view returns (uint256);\n\n    /// @return The block number in which the contract has been deployed.\n    function getCreationBlock() external view returns (uint256);\n\n    /// @return a SemVer-compliant version of the `RelayHub` contract.\n    function versionHub() external view returns (string memory);\n\n    /// @return A total measurable amount of gas left to current execution. Same as 'gasleft()' for pure EVMs.\n    function aggregateGasleft() external view returns (uint256);\n}\n\n"
    },
    "@opengsn/contracts/src/utils/GsnEip712Library.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\nimport \"../interfaces/IERC2771Recipient.sol\";\nimport \"../forwarder/IForwarder.sol\";\n\nimport \"./GsnUtils.sol\";\n\n/**\n * @title The ERC-712 Library for GSN\n * @notice Bridge Library to convert a GSN RelayRequest into a valid `ForwardRequest` for a `Forwarder`.\n */\nlibrary GsnEip712Library {\n    // maximum length of return value/revert reason for 'execute' method. Will truncate result if exceeded.\n    uint256 private constant MAX_RETURN_SIZE = 1024;\n\n    //copied from Forwarder (can't reference string constants even from another library)\n    string public constant GENERIC_PARAMS = \"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime\";\n\n    bytes public constant RELAYDATA_TYPE = \"RelayData(uint256 maxFeePerGas,uint256 maxPriorityFeePerGas,uint256 transactionCalldataGasUsed,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\";\n\n    string public constant RELAY_REQUEST_NAME = \"RelayRequest\";\n    string public constant RELAY_REQUEST_SUFFIX = string(abi.encodePacked(\"RelayData relayData)\", RELAYDATA_TYPE));\n\n    bytes public constant RELAY_REQUEST_TYPE = abi.encodePacked(\n        RELAY_REQUEST_NAME,\"(\",GENERIC_PARAMS,\",\", RELAY_REQUEST_SUFFIX);\n\n    bytes32 public constant RELAYDATA_TYPEHASH = keccak256(RELAYDATA_TYPE);\n    bytes32 public constant RELAY_REQUEST_TYPEHASH = keccak256(RELAY_REQUEST_TYPE);\n\n\n    struct EIP712Domain {\n        string name;\n        string version;\n        uint256 chainId;\n        address verifyingContract;\n    }\n\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n    );\n\n    function splitRequest(\n        GsnTypes.RelayRequest calldata req\n    )\n    internal\n    pure\n    returns (\n        bytes memory suffixData\n    ) {\n        suffixData = abi.encode(\n            hashRelayData(req.relayData));\n    }\n\n    //verify that the recipient trusts the given forwarder\n    // MUST be called by paymaster\n    function verifyForwarderTrusted(GsnTypes.RelayRequest calldata relayRequest) internal view {\n        (bool success, bytes memory ret) = relayRequest.request.to.staticcall(\n            abi.encodeWithSelector(\n                IERC2771Recipient.isTrustedForwarder.selector, relayRequest.relayData.forwarder\n            )\n        );\n        require(success, \"isTrustedForwarder: reverted\");\n        require(ret.length == 32, \"isTrustedForwarder: bad response\");\n        require(abi.decode(ret, (bool)), \"invalid forwarder for recipient\");\n    }\n\n    function verifySignature(\n        string memory domainSeparatorName,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature\n    ) internal view {\n        (bytes memory suffixData) = splitRequest(relayRequest);\n        bytes32 _domainSeparator = domainSeparator(domainSeparatorName, relayRequest.relayData.forwarder);\n        IForwarder forwarder = IForwarder(payable(relayRequest.relayData.forwarder));\n        forwarder.verify(relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature);\n    }\n\n    function verify(\n        string memory domainSeparatorName,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature\n    ) internal view {\n        verifyForwarderTrusted(relayRequest);\n        verifySignature(domainSeparatorName, relayRequest, signature);\n    }\n\n    function execute(\n        string memory domainSeparatorName,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature\n    ) internal returns (\n        bool forwarderSuccess,\n        bool callSuccess,\n        bytes memory ret\n    ) {\n        (bytes memory suffixData) = splitRequest(relayRequest);\n        bytes32 _domainSeparator = domainSeparator(domainSeparatorName, relayRequest.relayData.forwarder);\n        /* solhint-disable-next-line avoid-low-level-calls */\n        (forwarderSuccess, ret) = relayRequest.relayData.forwarder.call(\n            abi.encodeWithSelector(IForwarder.execute.selector,\n            relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature\n        ));\n        if ( forwarderSuccess ) {\n\n          //decode return value of execute:\n          (callSuccess, ret) = abi.decode(ret, (bool, bytes));\n        }\n        truncateInPlace(ret);\n    }\n\n    //truncate the given parameter (in-place) if its length is above the given maximum length\n    // do nothing otherwise.\n    //NOTE: solidity warns unless the method is marked \"pure\", but it DOES modify its parameter.\n    function truncateInPlace(bytes memory data) internal pure {\n        MinLibBytes.truncateInPlace(data, MAX_RETURN_SIZE);\n    }\n\n    function domainSeparator(string memory name, address forwarder) internal view returns (bytes32) {\n        return hashDomain(EIP712Domain({\n            name : name,\n            version : \"3\",\n            chainId : getChainID(),\n            verifyingContract : forwarder\n            }));\n    }\n\n    function getChainID() internal view returns (uint256 id) {\n        /* solhint-disable no-inline-assembly */\n        assembly {\n            id := chainid()\n        }\n    }\n\n    function hashDomain(EIP712Domain memory req) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                EIP712DOMAIN_TYPEHASH,\n                keccak256(bytes(req.name)),\n                keccak256(bytes(req.version)),\n                req.chainId,\n                req.verifyingContract));\n    }\n\n    function hashRelayData(GsnTypes.RelayData calldata req) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                RELAYDATA_TYPEHASH,\n                req.maxFeePerGas,\n                req.maxPriorityFeePerGas,\n                req.transactionCalldataGasUsed,\n                req.relayWorker,\n                req.paymaster,\n                req.forwarder,\n                keccak256(req.paymasterData),\n                req.clientId\n            ));\n    }\n}\n"
    },
    "@opengsn/contracts/src/forwarder/IForwarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/interfaces/IERC165.sol\";\n\n/**\n * @title The Forwarder Interface\n * @notice The contracts implementing this interface take a role of authorization, authentication and replay protection\n * for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.\n *\n * @notice if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that\n * represent the caller to the `data` field of the request and send this new data to the target address (the `to` field)\n *\n * :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract.\n * Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible!\n * Recipient contracts should only trust forwarders that passed through security audit,\n * otherwise they are susceptible to identity theft.\n */\ninterface IForwarder is IERC165 {\n\n    /**\n     * @notice A representation of a request for a `Forwarder` to send `data` on behalf of a `from` to a target (`to`).\n     */\n    struct ForwardRequest {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint256 nonce;\n        bytes data;\n        uint256 validUntilTime;\n    }\n\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\n\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\n\n    /**\n     * @param from The address of a sender.\n     * @return The nonce for this address.\n     */\n    function getNonce(address from)\n    external view\n    returns(uint256);\n\n    /**\n     * @notice Verify the transaction is valid and can be executed.\n     * Implementations must validate the signature and the nonce of the request are correct.\n     * Does not revert and returns successfully if the input is valid.\n     * Reverts if any validation has failed. For instance, if either signature or nonce are incorrect.\n     * Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.\n     */\n    function verify(\n        ForwardRequest calldata forwardRequest,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata signature\n    ) external view;\n\n    /**\n     * @notice Executes a transaction specified by the `ForwardRequest`.\n     * The transaction is first verified and then executed.\n     * The success flag and returned bytes array of the `CALL` are returned as-is.\n     *\n     * This method would revert only in case of a verification error.\n     *\n     * All the target errors are reported using the returned success flag and returned bytes array.\n     *\n     * @param forwardRequest All requested transaction parameters.\n     * @param domainSeparator The domain used when signing this request.\n     * @param requestTypeHash The request type used when signing this request.\n     * @param suffixData The ABI-encoded extension data for the current `RequestType` used when signing this request.\n     * @param signature The client signature to be validated.\n     *\n     * @return success The success flag of the underlying `CALL` to the target address.\n     * @return ret The byte array returned by the underlying `CALL` to the target address.\n     */\n    function execute(\n        ForwardRequest calldata forwardRequest,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata signature\n    )\n    external payable\n    returns (bool success, bytes memory ret);\n\n    /**\n     * @notice Register a new Request typehash.\n     *\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\n     *\n     * @param typeName The name of the request type.\n     * @param typeSuffix Any extra data after the generic params. Must contain add at least one param.\n     * The generic ForwardRequest type is always registered by the constructor.\n     */\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\n\n    /**\n     * @notice Register a new domain separator.\n     *\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\n     *\n     * @notice The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`.\n     * The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address.\n     * This method accepts the domain name and version to create and register the domain separator value.\n     * @param name The domain's display name.\n     * @param version The domain/protocol version.\n     */\n    function registerDomainSeparator(string calldata name, string calldata version) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@opengsn/contracts/src/interfaces/IStakeManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @title The StakeManager Interface\n * @notice In order to prevent an attacker from registering a large number of unresponsive relays, the GSN requires\n * the Relay Server to maintain a permanently locked stake in the system before being able to register.\n *\n * @notice Also, in some cases the behavior of a Relay Server may be found to be illegal by a `Penalizer` contract.\n * In such case, the stake will never be returned to the Relay Server operator and will be slashed.\n *\n * @notice An implementation of this interface is tasked with keeping Relay Servers' stakes, made in any ERC-20 token.\n * Note that the `RelayHub` chooses which ERC-20 tokens to support and how much stake is needed.\n */\ninterface IStakeManager is IERC165 {\n\n    /// @notice Emitted when a `stake` or `unstakeDelay` are initialized or increased.\n    event StakeAdded(\n        address indexed relayManager,\n        address indexed owner,\n        IERC20 token,\n        uint256 stake,\n        uint256 unstakeDelay\n    );\n\n    /// @notice Emitted once a stake is scheduled for withdrawal.\n    event StakeUnlocked(\n        address indexed relayManager,\n        address indexed owner,\n        uint256 withdrawTime\n    );\n\n    /// @notice Emitted when owner withdraws `relayManager` funds.\n    event StakeWithdrawn(\n        address indexed relayManager,\n        address indexed owner,\n        IERC20 token,\n        uint256 amount\n    );\n\n    /// @notice Emitted when an authorized `RelayHub` penalizes a `relayManager`.\n    event StakePenalized(\n        address indexed relayManager,\n        address indexed beneficiary,\n        IERC20 token,\n        uint256 reward\n    );\n\n    /// @notice Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized.\n    event HubAuthorized(\n        address indexed relayManager,\n        address indexed relayHub\n    );\n\n    /// @notice Emitted when a `relayManager` removes a `RelayHub` from a list of authorized.\n    event HubUnauthorized(\n        address indexed relayManager,\n        address indexed relayHub,\n        uint256 removalTime\n    );\n\n    /// @notice Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking.\n    event OwnerSet(\n        address indexed relayManager,\n        address indexed owner\n    );\n\n    /// @notice Emitted when a `burnAddress` is changed.\n    event BurnAddressSet(\n        address indexed burnAddress\n    );\n\n    /// @notice Emitted when a `devAddress` is changed.\n    event DevAddressSet(\n        address indexed devAddress\n    );\n\n    /// @notice Emitted if Relay Server is inactive for an `abandonmentDelay` and contract owner initiates its removal.\n    event RelayServerAbandoned(\n        address indexed relayManager,\n        uint256 abandonedTime\n    );\n\n    /// @notice Emitted to indicate an action performed by a relay server to prevent it from being marked as abandoned.\n    event RelayServerKeepalive(\n        address indexed relayManager,\n        uint256 keepaliveTime\n    );\n\n    /// @notice Emitted when the stake of an abandoned relayer has been confiscated and transferred to the `devAddress`.\n    event AbandonedRelayManagerStakeEscheated(\n        address indexed relayManager,\n        address indexed owner,\n        IERC20 token,\n        uint256 amount\n    );\n\n    /**\n     * @param stake - amount of ether staked for this relay\n     * @param unstakeDelay - number of seconds to elapse before the owner can retrieve the stake after calling 'unlock'\n     * @param withdrawTime - timestamp in seconds when 'withdraw' will be callable, or zero if the unlock has not been called\n     * @param owner - address that receives revenue and manages relayManager's stake\n     */\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelay;\n        uint256 withdrawTime;\n        uint256 abandonedTime;\n        uint256 keepaliveTime;\n        IERC20 token;\n        address owner;\n    }\n\n    struct RelayHubInfo {\n        uint256 removalTime;\n    }\n\n    /**\n     * @param devAddress - the address that will receive the 'abandoned' stake\n     * @param abandonmentDelay - the amount of time after which the relay can be marked as 'abandoned'\n     * @param escheatmentDelay - the amount of time after which the abandoned relay's stake and balance may be withdrawn to the `devAddress`\n     */\n    struct AbandonedRelayServerConfig {\n        address devAddress;\n        uint256 abandonmentDelay;\n        uint256 escheatmentDelay;\n    }\n\n    /**\n     * @notice Set the owner of a Relay Manager. Called only by the RelayManager itself.\n     * Note that owners cannot transfer ownership - if the entry already exists, reverts.\n     * @param owner - owner of the relay (as configured off-chain)\n     */\n    function setRelayManagerOwner(address owner) external;\n\n    /**\n     * @notice Put a stake for a relayManager and set its unstake delay.\n     * Only the owner can call this function. If the entry does not exist, reverts.\n     * The owner must give allowance of the ERC-20 token to the StakeManager before calling this method.\n     * It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens.\n     * @param token The address of an ERC-20 token that is used by the relayManager as a stake\n     * @param relayManager The address that represents a stake entry and controls relay registrations on relay hubs\n     * @param unstakeDelay The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`\n     * @param amount The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake\n     */\n    function stakeForRelayManager(IERC20 token, address relayManager, uint256 unstakeDelay, uint256 amount) external;\n\n    /**\n     * @notice Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`.\n     * @param relayManager The address of a Relay Manager whose stake is to be unlocked.\n     */\n    function unlockStake(address relayManager) external;\n    /**\n     * @notice Withdraw the unlocked stake.\n     * @param relayManager The address of a Relay Manager whose stake is to be withdrawn.\n     */\n    function withdrawStake(address relayManager) external;\n\n    /**\n     * @notice Add the `RelayHub` to a list of authorized by this Relay Manager.\n     * This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize.\n     * @param relayManager The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`.\n     * @param relayHub The address of a `RelayHub` to be authorized.\n     */\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\n\n    /**\n     * @notice Same as `authorizeHubByOwner` but can be called by the RelayManager itself.\n     */\n    function authorizeHubByManager(address relayHub) external;\n\n    /**\n     * @notice Remove the `RelayHub` from a list of authorized by this Relay Manager.\n     * @param relayManager The address of a Relay Manager.\n     * @param relayHub The address of a `RelayHub` to be unauthorized.\n     */\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\n\n    /**\n     * @notice Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself.\n     */\n    function unauthorizeHubByManager(address relayHub) external;\n\n    /**\n     * Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way.\n     * @param relayManager The address of a Relay Manager to be penalized.\n     * @param beneficiary The address that receives part of the penalty amount.\n     * @param amount A total amount of penalty to be withdrawn from stake.\n     */\n    function penalizeRelayManager(address relayManager, address beneficiary, uint256 amount) external;\n\n    /**\n     * @notice Allows the contract owner to set the given `relayManager` as abandoned after a configurable delay.\n     * Its entire stake and balance will be taken from a relay if it does not respond to being marked as abandoned.\n     */\n    function markRelayAbandoned(address relayManager) external;\n\n    /**\n     * @notice If more than `abandonmentDelay` has passed since the last Keepalive transaction, and relay manager\n     * has been marked as abandoned, and after that more that `escheatmentDelay` have passed, entire stake and\n     * balance will be taken from this relay.\n     */\n    function escheatAbandonedRelayStake(address relayManager) external;\n\n    /**\n     * @notice Sets a new `keepaliveTime` for the given `relayManager`, preventing it from being marked as abandoned.\n     * Can be called by an authorized `RelayHub` or by the `relayOwner` address.\n     */\n    function updateRelayKeepaliveTime(address relayManager) external;\n\n    /**\n     * @notice Check if the Relay Manager can be considered abandoned or not.\n     * Returns true if the stake's abandonment time is in the past including the escheatment delay, false otherwise.\n     */\n    function isRelayEscheatable(address relayManager) external view returns(bool);\n\n    /**\n     * @notice Get the stake details information for the given Relay Manager.\n     * @param relayManager The address of a Relay Manager.\n     * @return stakeInfo The `StakeInfo` structure.\n     * @return isSenderAuthorizedHub `true` if the `msg.sender` for this call was a `RelayHub` that is authorized now.\n     * `false` if the `msg.sender` for this call is not authorized.\n     */\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo, bool isSenderAuthorizedHub);\n\n    /**\n     * @return The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake.\n     */\n    function getMaxUnstakeDelay() external view returns (uint256);\n\n    /**\n     * @notice Change the address that will receive the 'burned' part of the penalized stake.\n     * This is done to prevent malicious Relay Server from penalizing itself and breaking even.\n     */\n    function setBurnAddress(address _burnAddress) external;\n\n    /**\n     * @return The address that will receive the 'burned' part of the penalized stake.\n     */\n    function getBurnAddress() external view returns (address);\n\n    /**\n     * @notice Change the address that will receive the 'abandoned' stake.\n     * This is done to prevent Relay Servers that lost their keys from losing access to funds.\n     */\n    function setDevAddress(address _burnAddress) external;\n\n    /**\n     * @return The structure that contains all configuration values for the 'abandoned' stake.\n     */\n    function getAbandonedRelayServerConfig() external view returns (AbandonedRelayServerConfig memory);\n\n    /**\n     * @return the block number in which the contract has been deployed.\n     */\n    function getCreationBlock() external view returns (uint256);\n\n    /**\n     * @return a SemVer-compliant version of the `StakeManager` contract.\n     */\n    function versionSM() external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IERC2771Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n/**\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\n *\n * @notice A contract must implement this interface in order to support relayed transaction.\n *\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\n */\nabstract contract IERC2771Recipient {\n\n    /**\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\n     * @param forwarder The address of the Forwarder contract that is being used.\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\n     * @return sender The real sender of this call.\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\n     * Otherwise simply returns `msg.sender`.\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    /**\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\n     * @return data The real `msg.data` of this call.\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\n     * of the `msg.data` - so this method will strip those 20 bytes off.\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\n     */\n    function _msgData() internal virtual view returns (bytes calldata);\n}\n"
    },
    "@opengsn/contracts/src/utils/GsnUtils.sol": {
      "content": "/* solhint-disable no-inline-assembly */\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../utils/MinLibBytes.sol\";\nimport \"./GsnTypes.sol\";\n\n/**\n * @title The GSN Solidity Utils Library\n * @notice Some library functions used throughout the GSN Solidity codebase.\n */\nlibrary GsnUtils {\n\n    bytes32 constant private RELAY_REQUEST_ID_MASK = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /**\n     * @notice Calculate an identifier for the meta-transaction in a format similar to a transaction hash.\n     * Note that uniqueness relies on signature and may not be enforced if meta-transactions are verified\n     * with a different algorithm, e.g. when batching.\n     * @param relayRequest The `RelayRequest` for which an ID is being calculated.\n     * @param signature The signature for the `RelayRequest`. It is not validated here and may even remain empty.\n     */\n    function getRelayRequestID(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature)\n    internal\n    pure\n    returns (bytes32) {\n        return keccak256(abi.encode(relayRequest.request.from, relayRequest.request.nonce, signature)) & RELAY_REQUEST_ID_MASK;\n    }\n\n    /**\n     * @notice Extract the method identifier signature from the encoded function call.\n     */\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\n        return MinLibBytes.readBytes4(msgData, 0);\n    }\n\n    /**\n     * @notice Extract a parameter from encoded-function block.\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\n     * The return value should be casted to the right type (`uintXXX`/`bytesXXX`/`address`/`bool`/`enum`).\n     * @param msgData Byte array containing a uint256 value.\n     * @param index Index in byte array of uint256 value.\n     * @return result uint256 value from byte array.\n     */\n    function getParam(bytes memory msgData, uint256 index) internal pure returns (uint256 result) {\n        return MinLibBytes.readUint256(msgData, 4 + index * 32);\n    }\n\n    /// @notice Re-throw revert with the same revert data.\n    function revertWithData(bytes memory data) internal pure {\n        assembly {\n            revert(add(data,32), mload(data))\n        }\n    }\n\n}\n"
    },
    "@opengsn/contracts/src/utils/MinLibBytes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// minimal bytes manipulation required by GSN\n// a minimal subset from 0x/LibBytes\n/* solhint-disable no-inline-assembly */\npragma solidity ^0.8.0;\n\nlibrary MinLibBytes {\n\n    //truncate the given parameter (in-place) if its length is above the given maximum length\n    // do nothing otherwise.\n    //NOTE: solidity warns unless the method is marked \"pure\", but it DOES modify its parameter.\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\n        if (data.length > maxlen) {\n            assembly { mstore(data, maxlen) }\n        }\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require (b.length >= index + 20, \"readAddress: data too short\");\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(b.length >= index + 32, \"readBytes32: data too short\" );\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, add(index,32)))\n        }\n        return result;\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(b.length >= index + 4, \"readBytes4: data too short\");\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, add(index,32)))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/HashcashPaymaster.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./AcceptEverythingPaymaster.sol\";\n\n///A paymaster that requires some calculation from the client before accepting a request.\n///This comes to prevent attack by anonymous clients.\n/// Usage:\n/// - Create an instance of the HashcashPaymaster, and give it a proper difficulty level.\n/// - When creating a RelayProvider, make sure to use the createHashcashAsyncApproval() with\n///   the same difficulty level.\n///\n/// The \"difficulty\" level is the number of zero bits at the generated hash.\n/// a value of 15 requires roughly 32000 iterations and take ~0.5 second on a normal PC\ncontract HashcashPaymaster is AcceptEverythingPaymaster {\n\n    function versionPaymaster() external view override virtual returns (string memory){\n        return \"3.0.0-beta.3+opengsn.hashcash.ipaymaster\";\n    }\n\n    uint8 public difficulty;\n\n    constructor(uint8 _difficulty) {\n        difficulty = _difficulty;\n    }\n\n    function _verifyApprovalData(bytes calldata approvalData) internal virtual override view{\n        // solhint-disable-next-line reason-string\n        require(approvalData.length == 64, \"approvalData: invalid length for hash and nonce\");\n    }\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    virtual\n    returns (bytes memory, bool revertOnRecipientRevert) {\n        (maxPossibleGas, signature);\n\n        (bytes32 hash, uint256 hashNonce) = abi.decode(approvalData, (bytes32, uint256));\n        bytes32 calcHash = keccak256(abi.encode(\n                relayRequest.request.from,\n                relayRequest.request.nonce,\n                hashNonce));\n        require(hash == calcHash, \"wrong hash\");\n        require(uint256(hash) < (uint256(1) << (256 - difficulty)), \"difficulty not met\");\n        return (\"\", false);\n    }\n}\n"
    },
    "contracts/WhitelistPaymaster.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@opengsn/contracts/src/BasePaymaster.sol\";\n\n/// A sample paymaster that has whitelists for senders, targets and methods.\n/// - if at least one sender is whitelisted, then ONLY whitelisted senders are allowed.\n/// - if at least one target is whitelisted, then ONLY whitelisted targets are allowed.\ncontract WhitelistPaymaster is BasePaymaster {\n\n    bool public useSenderWhitelist;\n    bool public useTargetWhitelist;\n    bool public useMethodWhitelist;\n    bool public useRejectOnRecipientRevert;\n    mapping(address => bool) public senderWhitelist;\n    mapping(address => bool) public targetWhitelist;\n    mapping(address => mapping(bytes4 => bool)) public methodWhitelist;\n\n    function versionPaymaster() external view override virtual returns (string memory){\n        return \"3.0.0-beta.3+opengsn.whitelist.ipaymaster\";\n    }\n\n    function whitelistSender(address sender, bool isAllowed) public onlyOwner {\n        senderWhitelist[sender] = isAllowed;\n    }\n\n    function whitelistTarget(address target, bool isAllowed) public onlyOwner {\n        targetWhitelist[target] = isAllowed;\n    }\n\n    function whitelistMethod(address target, bytes4 method, bool isAllowed) public onlyOwner {\n        methodWhitelist[target][method] = isAllowed;\n    }\n\n    function setConfiguration(\n        bool _useSenderWhitelist,\n        bool _useTargetWhitelist,\n        bool _useMethodWhitelist,\n        bool _useRejectOnRecipientRevert\n    ) public onlyOwner {\n        useSenderWhitelist = _useSenderWhitelist;\n        useTargetWhitelist = _useTargetWhitelist;\n        useMethodWhitelist = _useMethodWhitelist;\n        useRejectOnRecipientRevert = _useRejectOnRecipientRevert;\n    }\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    virtual\n    returns (bytes memory context, bool revertOnRecipientRevert) {\n        (signature, maxPossibleGas);\n        require(approvalData.length == 0, \"approvalData: invalid length\");\n        require(relayRequest.relayData.paymasterData.length == 0, \"paymasterData: invalid length\");\n\n        if (useSenderWhitelist) {\n            address sender = relayRequest.request.from;\n            require(senderWhitelist[sender], \"sender not whitelisted\");\n        }\n\n        if (useTargetWhitelist) {\n            address target = relayRequest.request.to;\n            require(targetWhitelist[target], \"target not whitelisted\");\n        }\n\n        if (useMethodWhitelist) {\n            address target = relayRequest.request.to;\n            bytes4 method = GsnUtils.getMethodSig(relayRequest.request.data);\n            require(methodWhitelist[target][method], \"method not whitelisted\");\n        }\n\n        return (\"\", useRejectOnRecipientRevert);\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    virtual {\n        (context, success, gasUseWithoutPost, relayData);\n    }\n}\n"
    },
    "contracts/VerifyingPaymaster.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@opengsn/contracts/src/BasePaymaster.sol\";\nimport \"@opengsn/contracts/src/forwarder/IForwarder.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/**\n * a sample paymaster that requires an external signature on the request.\n * - the client creates a request.\n * - the client uses a RelayProvider with a callback function asyncApprovalData\n * - the callback sends the request over to a dapp-specific web service, to verify the request.\n * - the service verifies the request, signs it and return the signature.\n * - the client now sends this signed approval as the \"approvalData\" field of the GSN request.\n * - the paymaster verifies the signature.\n * This way, any external logic can be used to validate the request.\n * e.g.:\n * - OAuth, or any other login mechanism.\n * - Captcha approval\n * - off-chain payment system (note that its a payment for gas, so probably it doesn't require any KYC)\n * - etc.\n */\ncontract VerifyingPaymaster is Ownable, BasePaymaster {\n    address private constant DRY_RUN_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    address public signer;\n\n    function _verifyApprovalData(bytes calldata approvalData) internal virtual override view {\n        // solhint-disable-next-line avoid-tx-origin\n        if (tx.origin != DRY_RUN_ADDRESS) {\n            // solhint-disable-next-line reason-string\n            require(approvalData.length == 65, \"approvalData: invalid length for signature\");\n        }\n    }\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    virtual\n    returns (bytes memory context, bool revertOnRecipientRevert) {\n        (signature, maxPossibleGas);\n\n        bytes32 requestHash = getRequestHash(relayRequest);\n        // solhint-disable-next-line avoid-tx-origin\n        if (tx.origin != DRY_RUN_ADDRESS) {\n            require(signer == ECDSA.recover(requestHash, approvalData), \"approvalData: wrong signature\");\n        }\n        return (\"\", false);\n    }\n\n    function getRequestHash(GsnTypes.RelayRequest calldata relayRequest) public pure returns (bytes32) {\n        return keccak256(\n            abi.encodePacked(\n                packForwardRequest(relayRequest.request),\n                packRelayData(relayRequest.relayData)\n            )\n        );\n    }\n\n    function packForwardRequest(IForwarder.ForwardRequest calldata req) public pure returns (bytes memory) {\n        return abi.encode(req.from, req.to, req.value, req.gas, req.nonce, req.data);\n    }\n\n    function packRelayData(GsnTypes.RelayData calldata d) public pure returns (bytes memory) {\n        return abi.encode(d.maxFeePerGas, d.maxPriorityFeePerGas, d.relayWorker, d.paymaster, d.paymasterData, d.clientId);\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    virtual {\n        (context, success, gasUseWithoutPost, relayData);\n    }\n\n    function versionPaymaster() external view override virtual returns (string memory){\n        return \"3.0.0-beta.3+opengsn.vpm.ipaymaster\";\n    }\n\n    function setSigner(address _signer) public onlyOwner {\n        signer = _signer;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@opengsn/contracts/src/Penalizer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./utils/RLPReader.sol\";\nimport \"./utils/GsnUtils.sol\";\nimport \"./interfaces/IRelayHub.sol\";\nimport \"./interfaces/IPenalizer.sol\";\n\n/**\n * @title The Penalizer Implementation\n *\n * @notice This Penalizer supports parsing Legacy, Type 1 and Type 2 raw RLP Encoded transactions.\n */\ncontract Penalizer is IPenalizer, ERC165 {\n    using ECDSA for bytes32;\n\n    /// @inheritdoc IPenalizer\n    string public override versionPenalizer = \"3.0.0-beta.3+opengsn.penalizer.ipenalizer\";\n\n    uint256 internal immutable penalizeBlockDelay;\n    uint256 internal immutable penalizeBlockExpiration;\n\n    constructor(\n        uint256 _penalizeBlockDelay,\n        uint256 _penalizeBlockExpiration\n    ) {\n        penalizeBlockDelay = _penalizeBlockDelay;\n        penalizeBlockExpiration = _penalizeBlockExpiration;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IPenalizer).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IPenalizer\n    function getPenalizeBlockDelay() external override view returns (uint256) {\n        return penalizeBlockDelay;\n    }\n\n    /// @inheritdoc IPenalizer\n    function getPenalizeBlockExpiration() external override view returns (uint256) {\n        return penalizeBlockExpiration;\n    }\n\n    function isLegacyTransaction(bytes calldata rawTransaction) internal pure returns (bool) {\n        uint8 transactionTypeByte = uint8(rawTransaction[0]);\n        return (transactionTypeByte >= 0xc0 && transactionTypeByte <= 0xfe);\n    }\n\n    function isTransactionType1(bytes calldata rawTransaction) internal pure returns (bool) {\n        return (uint8(rawTransaction[0]) == 1);\n    }\n\n    function isTransactionType2(bytes calldata rawTransaction) internal pure returns (bool) {\n        return (uint8(rawTransaction[0]) == 2);\n    }\n\n    /// @return `true` if raw transaction is of types Legacy, 1 or 2. `false` otherwise.\n    function isTransactionTypeValid(bytes calldata rawTransaction) public pure returns(bool) {\n        return isLegacyTransaction(rawTransaction) || isTransactionType1(rawTransaction) || isTransactionType2(rawTransaction);\n    }\n\n    /// @return transaction The details that the `Penalizer` needs to decide if the transaction is penalizable.\n    function decodeTransaction(bytes calldata rawTransaction) public pure returns (Transaction memory transaction) {\n        if (isTransactionType1(rawTransaction)) {\n            (transaction.nonce,\n            transaction.gasLimit,\n            transaction.to,\n            transaction.value,\n            transaction.data) = RLPReader.decodeTransactionType1(rawTransaction);\n        } else if (isTransactionType2(rawTransaction)) {\n            (transaction.nonce,\n            transaction.gasLimit,\n            transaction.to,\n            transaction.value,\n            transaction.data) = RLPReader.decodeTransactionType2(rawTransaction);\n        } else {\n            (transaction.nonce,\n            transaction.gasLimit,\n            transaction.to,\n            transaction.value,\n            transaction.data) = RLPReader.decodeLegacyTransaction(rawTransaction);\n        }\n        return transaction;\n    }\n\n    mapping(bytes32 => uint256) public commits;\n\n    /// @inheritdoc IPenalizer\n    function commit(bytes32 commitHash) external override {\n        uint256 readyBlockNumber = block.number + penalizeBlockDelay;\n        commits[commitHash] = readyBlockNumber;\n        emit CommitAdded(msg.sender, commitHash, readyBlockNumber);\n    }\n\n    /// Modifier that verifies there was a `commit` operation before this call that has not expired yet.\n    modifier commitRevealOnly() {\n        bytes32 commitHash = keccak256(abi.encodePacked(keccak256(msg.data), msg.sender));\n        uint256 readyBlockNumber = commits[commitHash];\n        delete commits[commitHash];\n        // msg.sender can only be fake during off-chain view call, allowing Penalizer process to check transactions\n        if(msg.sender != address(type(uint160).max)) {\n            require(readyBlockNumber != 0, \"no commit\");\n            require(readyBlockNumber < block.number, \"reveal penalize too soon\");\n            require(readyBlockNumber + penalizeBlockExpiration > block.number, \"reveal penalize too late\");\n        }\n        _;\n    }\n\n    /// @inheritdoc IPenalizer\n    function penalizeRepeatedNonce(\n        bytes calldata unsignedTx1,\n        bytes calldata signature1,\n        bytes calldata unsignedTx2,\n        bytes calldata signature2,\n        IRelayHub hub,\n        uint256 randomValue\n    )\n    public\n    override\n    commitRevealOnly {\n        (randomValue);\n        _penalizeRepeatedNonce(unsignedTx1, signature1, unsignedTx2, signature2, hub);\n    }\n\n    function _penalizeRepeatedNonce(\n        bytes calldata unsignedTx1,\n        bytes calldata signature1,\n        bytes calldata unsignedTx2,\n        bytes calldata signature2,\n        IRelayHub hub\n    )\n    private\n    {\n        address addr1 = keccak256(unsignedTx1).recover(signature1);\n        address addr2 = keccak256(unsignedTx2).recover(signature2);\n\n        require(addr1 == addr2, \"Different signer\");\n        require(addr1 != address(0), \"ecrecover failed\");\n\n        Transaction memory decodedTx1 = decodeTransaction(unsignedTx1);\n        Transaction memory decodedTx2 = decodeTransaction(unsignedTx2);\n\n        // checking that the same nonce is used in both transaction, with both signed by the same address\n        // and the actual data is different\n        // note: we compare the hash of the tx to save gas over iterating both byte arrays\n        require(decodedTx1.nonce == decodedTx2.nonce, \"Different nonce\");\n\n        bytes memory dataToCheck1 =\n        abi.encodePacked(decodedTx1.data, decodedTx1.gasLimit, decodedTx1.to, decodedTx1.value);\n\n        bytes memory dataToCheck2 =\n        abi.encodePacked(decodedTx2.data, decodedTx2.gasLimit, decodedTx2.to, decodedTx2.value);\n\n        require(keccak256(dataToCheck1) != keccak256(dataToCheck2), \"tx is equal\");\n\n        penalize(addr1, hub);\n    }\n\n    /// @inheritdoc IPenalizer\n    function penalizeIllegalTransaction(\n        bytes calldata unsignedTx,\n        bytes calldata signature,\n        IRelayHub hub,\n        uint256 randomValue\n    )\n    public\n    override\n    commitRevealOnly {\n        (randomValue);\n        _penalizeIllegalTransaction(unsignedTx, signature, hub);\n    }\n\n    function _penalizeIllegalTransaction(\n        bytes calldata unsignedTx,\n        bytes calldata signature,\n        IRelayHub hub\n    )\n    private\n    {\n        if (isTransactionTypeValid(unsignedTx)) {\n            Transaction memory decodedTx = decodeTransaction(unsignedTx);\n            if (decodedTx.to == address(hub)) {\n                bytes4 selector = GsnUtils.getMethodSig(decodedTx.data);\n                bool isWrongMethodCall = selector != IRelayHub.relayCall.selector;\n                require(\n                    isWrongMethodCall,\n                    \"Legal relay transaction\");\n            }\n        }\n        address relay = keccak256(unsignedTx).recover(signature);\n        require(relay != address(0), \"ecrecover failed\");\n        penalize(relay, hub);\n    }\n\n    function penalize(address relayWorker, IRelayHub hub) private {\n        hub.penalize(relayWorker, payable(msg.sender));\n    }\n}\n"
    },
    "@opengsn/contracts/src/utils/RLPReader.sol": {
      "content": "// SPDX-License-Identifier:APACHE-2.0\n/*\n* Taken from https://github.com/hamdiallam/Solidity-RLP\n*/\n/* solhint-disable */\npragma solidity ^0.8.0;\n\nlibrary RLPReader {\n\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint len;\n        uint memPtr;\n    }\n\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    // helper function to decode rlp encoded legacy ethereum transaction\n    /*\n    * @param rawTransaction RLP encoded legacy ethereum transaction rlp([nonce, gasPrice, gasLimit, to, value, data]))\n    * @return tuple (nonce,gasLimit,to,value,data)\n    */\n\n    function decodeLegacyTransaction(bytes calldata rawTransaction) internal pure returns (uint, uint, address, uint, bytes memory){\n        RLPReader.RLPItem[] memory values = rawTransaction.toRlpItem().toList(); // must convert to an rlpItem first!\n        return (values[0].toUint(), values[2].toUint(), values[3].toAddress(), values[4].toUint(), values[5].toBytes());\n    }\n\n    /*\n    * @param rawTransaction format: 0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, access_list]))\n    * @return tuple (nonce,gasLimit,to,value,data)\n    */\n    function decodeTransactionType1(bytes calldata rawTransaction) internal pure returns (uint, uint, address, uint, bytes memory){\n        bytes memory payload = rawTransaction[1:rawTransaction.length];\n        RLPReader.RLPItem[] memory values = payload.toRlpItem().toList(); // must convert to an rlpItem first!\n        return (values[1].toUint(), values[3].toUint(), values[4].toAddress(), values[5].toUint(), values[6].toBytes());\n    }\n\n    /*\n    * @param rawTransaction format: 0x02 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list]))\n    * @return tuple (nonce,gasLimit,to,value,data)\n    */\n    function decodeTransactionType2(bytes calldata rawTransaction) internal pure returns (uint, uint, address, uint, bytes memory){\n        bytes memory payload = rawTransaction[1:rawTransaction.length];\n        RLPReader.RLPItem[] memory values = payload.toRlpItem().toList(); // must convert to an rlpItem first!\n        return (values[1].toUint(), values[4].toUint(), values[5].toAddress(), values[6].toUint(), values[7].toBytes());\n    }\n\n    /*\n    * @param item RLP encoded bytes\n    */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        if (item.length == 0)\n            return RLPItem(0, 0);\n        uint memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n        return RLPItem(item.length, memPtr);\n    }\n    /*\n    * @param item RLP encoded list in bytes\n    */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory result) {\n        require(isList(item), \"isList failed\");\n        uint items = numItems(item);\n        result = new RLPItem[](items);\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint dataLen;\n        for (uint i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n    }\n    /*\n    * Helpers\n    */\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        uint8 byte0;\n        uint memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n        if (byte0 < LIST_SHORT_START)\n            return false;\n        return true;\n    }\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) internal pure returns (uint) {\n        uint count = 0;\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr);\n            // skip over an item\n            count++;\n        }\n        return count;\n    }\n    // @return entire rlp item byte length\n    function _itemLength(uint memPtr) internal pure returns (uint len) {\n        uint byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n        if (byte0 < STRING_SHORT_START)\n            return 1;\n        else if (byte0 < STRING_LONG_START)\n            return byte0 - STRING_SHORT_START + 1;\n        else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // number of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n            /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                len := add(dataLen, add(byteLen, 1))\n            }\n        }\n        else if (byte0 < LIST_LONG_START) {\n            return byte0 - LIST_SHORT_START + 1;\n        }\n        else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                len := add(dataLen, add(byteLen, 1))\n            }\n        }\n    }\n    // @return number of bytes until the data\n    function _payloadOffset(uint memPtr) internal pure returns (uint) {\n        uint byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n        if (byte0 < STRING_SHORT_START)\n            return 0;\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\n            return 1;\n        else if (byte0 < LIST_SHORT_START)  // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        else\n            return byte0 - (LIST_LONG_START - 1) + 1;\n    }\n    /** RLPItem conversions into data types **/\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        uint ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1, \"Invalid RLPItem. Booleans are encoded in 1 byte\");\n        uint result;\n        uint memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n        return result == 0 ? false : true;\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix according to RLP spec\n        require(item.len <= 21, \"Invalid RLPItem. Addresses are encoded in 20 bytes or less\");\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint) {\n        uint offset = _payloadOffset(item.memPtr);\n        uint len = item.len - offset;\n        uint memPtr = item.memPtr + offset;\n        uint result;\n        assembly {\n            result := div(mload(memPtr), exp(256, sub(32, len))) // shift to the correct location\n        }\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        uint offset = _payloadOffset(item.memPtr);\n        uint len = item.len - offset;\n        // data length\n        bytes memory result = new bytes(len);\n        uint destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n        copy(item.memPtr + offset, destPtr, len);\n        return result;\n    }\n    /*\n    * @param src Pointer to source\n    * @param dest Pointer to destination\n    * @param len Amount of memory to copy from the source\n    */\n    function copy(uint src, uint dest, uint len) internal pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint mask = 256 ** (WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IPenalizer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\n\nimport \"./IRelayHub.sol\";\n\n/**\n * @title The Penalizer Interface\n * @notice In some cases the behavior of a Relay Server may be found to be illegal.\n * It is the responsibility of a `Penalizer` contract to judge whether there was a penalizable event.\n *\n * @notice In case there was, the `Penalizer` will direct the `RelayHub` to slash the stake of the faulty Relay Server.\n */\ninterface IPenalizer is IERC165 {\n\n    /// @notice Emitted once the reporter submits the first step in the commit-reveal process.\n    event CommitAdded(address indexed sender, bytes32 indexed commitHash, uint256 readyBlockNumber);\n\n    struct Transaction {\n        uint256 nonce;\n        uint256 gasLimit;\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    /**\n     * @notice Called by the reporter as the first step in the commit-reveal process.\n     * Any sender can call it to make sure no-one can front-run it to claim this penalization.\n     * @param commitHash The hash of the report of a penalizable behaviour the reporter wants to reveal.\n     * Calculated as `commit(keccak(encodedPenalizeFunction))`.\n     */\n    function commit(bytes32 commitHash) external;\n\n    /**\n     * @notice Called by the reporter as the second step in the commit-reveal process.\n     * If a Relay Worker attacked the system by signing multiple transactions with same nonce so only one is accepted,\n     * anyone can grab both transactions from the blockchain and submit them here.\n     * Check whether `unsignedTx1` != `unsignedTx2`, that both are signed by the same address,\n     * and that `unsignedTx1.nonce` == `unsignedTx2.nonce`.\n     * If all conditions are met, relay is considered an \"offending relay\".\n     * The offending relay will be unregistered immediately, its stake will be forfeited and given\n     * to the address who reported it (the `msg.sender`), thus incentivizing anyone to report offending relays.\n     */\n    function penalizeRepeatedNonce(\n        bytes calldata unsignedTx1,\n        bytes calldata signature1,\n        bytes calldata unsignedTx2,\n        bytes calldata signature2,\n        IRelayHub hub,\n        uint256 randomValue\n    ) external;\n\n    /**\n     * @notice Called by the reporter as the second step in the commit-reveal process.\n     * The Relay Workers are not allowed to make calls other than to the `relayCall` method.\n     */\n    function penalizeIllegalTransaction(\n        bytes calldata unsignedTx,\n        bytes calldata signature,\n        IRelayHub hub,\n        uint256 randomValue\n    ) external;\n\n    /// @return a SemVer-compliant version of the `Penalizer` contract.\n    function versionPenalizer() external view returns (string memory);\n\n    /// @return The minimum delay between commit and reveal steps.\n    function getPenalizeBlockDelay() external view returns (uint256);\n\n    /// @return The maximum delay between commit and reveal steps.\n    function getPenalizeBlockExpiration() external view returns (uint256);\n}\n"
    },
    "@opengsn/contracts/src/RelayHub.sol": {
      "content": "/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable not-rely-on-time */\n/* solhint-disable avoid-tx-origin */\n/* solhint-disable bracket-align */\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\n// #if ENABLE_CONSOLE_LOG\nimport \"hardhat/console.sol\";\n// #endif\n\nimport \"./utils/MinLibBytes.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./utils/GsnUtils.sol\";\nimport \"./utils/GsnEip712Library.sol\";\nimport \"./utils/RelayHubValidator.sol\";\nimport \"./utils/GsnTypes.sol\";\nimport \"./interfaces/IRelayHub.sol\";\nimport \"./interfaces/IPaymaster.sol\";\nimport \"./forwarder/IForwarder.sol\";\nimport \"./interfaces/IStakeManager.sol\";\nimport \"./interfaces/IRelayRegistrar.sol\";\nimport \"./interfaces/IStakeManager.sol\";\n\n/**\n * @title The RelayHub Implementation\n * @notice This contract implements the `IRelayHub` interface for the EVM-compatible networks.\n */\ncontract RelayHub is IRelayHub, Ownable, ERC165 {\n    using ERC165Checker for address;\n    using Address for address;\n\n    address private constant DRY_RUN_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    /// @inheritdoc IRelayHub\n    function versionHub() override virtual public pure returns (string memory){\n        return \"3.0.0-beta.3+opengsn.hub.irelayhub\";\n    }\n\n    IStakeManager internal immutable stakeManager;\n    address internal immutable penalizer;\n    address internal immutable batchGateway;\n    address internal immutable relayRegistrar;\n\n    RelayHubConfig internal config;\n\n    /// @inheritdoc IRelayHub\n    function getConfiguration() public override view returns (RelayHubConfig memory) {\n        return config;\n    }\n\n    /// @inheritdoc IRelayHub\n    function setConfiguration(RelayHubConfig memory _config) public override onlyOwner {\n        require(_config.devFee < 100, \"dev fee too high\");\n        config = _config;\n        emit RelayHubConfigured(config);\n    }\n\n    // maps ERC-20 token address to a minimum stake for it\n    mapping(IERC20 => uint256) internal minimumStakePerToken;\n\n    /// @inheritdoc IRelayHub\n    function setMinimumStakes(IERC20[] memory token, uint256[] memory minimumStake) public override onlyOwner {\n        require(token.length == minimumStake.length, \"setMinimumStakes: wrong length\");\n        for (uint256 i = 0; i < token.length; i++) {\n            minimumStakePerToken[token[i]] = minimumStake[i];\n            emit StakingTokenDataChanged(address(token[i]), minimumStake[i]);\n        }\n    }\n\n    // maps relay worker's address to its manager's address\n    mapping(address => address) internal workerToManager;\n\n    // maps relay managers to the number of their workers\n    mapping(address => uint256) internal workerCount;\n\n    mapping(address => uint256) internal balances;\n\n    uint256 internal immutable creationBlock;\n    uint256 internal deprecationTime = type(uint256).max;\n\n    constructor (\n        IStakeManager _stakeManager,\n        address _penalizer,\n        address _batchGateway,\n        address _relayRegistrar,\n        RelayHubConfig memory _config\n    ) {\n        creationBlock = block.number;\n        stakeManager = _stakeManager;\n        penalizer = _penalizer;\n        batchGateway = _batchGateway;\n        relayRegistrar = _relayRegistrar;\n        setConfiguration(_config);\n    }\n\n    /// @inheritdoc IRelayHub\n    function getCreationBlock() external override virtual view returns (uint256){\n        return creationBlock;\n    }\n\n    /// @inheritdoc IRelayHub\n    function getDeprecationTime() external override view returns (uint256) {\n        return deprecationTime;\n    }\n\n    /// @inheritdoc IRelayHub\n    function getStakeManager() external override view returns (IStakeManager) {\n        return stakeManager;\n    }\n\n    /// @inheritdoc IRelayHub\n    function getPenalizer() external override view returns (address) {\n        return penalizer;\n    }\n\n    /// @inheritdoc IRelayHub\n    function getBatchGateway() external override view returns (address) {\n        return batchGateway;\n    }\n\n    /// @inheritdoc IRelayHub\n    function getRelayRegistrar() external override view returns (address) {\n        return relayRegistrar;\n    }\n\n    /// @inheritdoc IRelayHub\n    function getMinimumStakePerToken(IERC20 token) external override view returns (uint256) {\n        return minimumStakePerToken[token];\n    }\n\n    /// @inheritdoc IRelayHub\n    function getWorkerManager(address worker) external override view returns (address) {\n        return workerToManager[worker];\n    }\n\n    /// @inheritdoc IRelayHub\n    function getWorkerCount(address manager) external override view returns (uint256) {\n        return workerCount[manager];\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IRelayHub).interfaceId ||\n            interfaceId == type(Ownable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IRelayHub\n    function onRelayServerRegistered(address relayManager) external override {\n        require(msg.sender == relayRegistrar, \"caller is not relay registrar\");\n        verifyRelayManagerStaked(relayManager);\n        require(workerCount[relayManager] > 0, \"no relay workers\");\n        stakeManager.updateRelayKeepaliveTime(relayManager);\n    }\n\n    /// @inheritdoc IRelayHub\n    function addRelayWorkers(address[] calldata newRelayWorkers) external override {\n        address relayManager = msg.sender;\n        uint256 newWorkerCount = workerCount[relayManager] + newRelayWorkers.length;\n        workerCount[relayManager] = newWorkerCount;\n        require(newWorkerCount <= config.maxWorkerCount, \"too many workers\");\n\n        verifyRelayManagerStaked(relayManager);\n\n        for (uint256 i = 0; i < newRelayWorkers.length; i++) {\n            require(workerToManager[newRelayWorkers[i]] == address(0), \"this worker has a manager\");\n            workerToManager[newRelayWorkers[i]] = relayManager;\n        }\n\n        emit RelayWorkersAdded(relayManager, newRelayWorkers, newWorkerCount);\n    }\n\n    /// @inheritdoc IRelayHub\n    function depositFor(address target) public virtual override payable {\n        require(target.supportsInterface(type(IPaymaster).interfaceId), \"target is not a valid IPaymaster\");\n        uint256 amount = msg.value;\n\n        balances[target] = balances[target] + amount;\n\n        emit Deposited(target, msg.sender, amount);\n    }\n\n    /// @inheritdoc IRelayHub\n    function balanceOf(address target) external override view returns (uint256) {\n        return balances[target];\n    }\n\n    /// @inheritdoc IRelayHub\n    function withdraw(address payable dest, uint256 amount) public override {\n        uint256[] memory amounts = new uint256[](1);\n        address payable[] memory destinations = new address payable[](1);\n        amounts[0] = amount;\n        destinations[0] = dest;\n        withdrawMultiple(destinations, amounts);\n    }\n\n    /// @inheritdoc IRelayHub\n    function withdrawMultiple(address payable[] memory dest, uint256[] memory amount) public override {\n        address payable account = payable(msg.sender);\n        for (uint256 i = 0; i < amount.length; i++) {\n            // #if ENABLE_CONSOLE_LOG\n            console.log(\"withdrawMultiple %s %s %s\", balances[account], dest[i], amount[i]);\n            // #endif\n            uint256 balance = balances[account];\n            require(balance >= amount[i], \"insufficient funds\");\n            balances[account] = balance - amount[i];\n            (bool success, ) = dest[i].call{value: amount[i]}(\"\");\n            require(success, \"Transfer failed.\");\n            emit Withdrawn(account, dest[i], amount[i]);\n        }\n    }\n\n    function verifyGasAndDataLimits(\n        uint256 maxAcceptanceBudget,\n        GsnTypes.RelayRequest calldata relayRequest,\n        uint256 initialGasLeft\n    )\n    private\n    view\n    returns (IPaymaster.GasAndDataLimits memory gasAndDataLimits, uint256 maxPossibleGas) {\n        gasAndDataLimits =\n            IPaymaster(relayRequest.relayData.paymaster).getGasAndDataLimits{gas:50000}();\n        require(msg.data.length <= gasAndDataLimits.calldataSizeLimit, \"msg.data exceeded limit\" );\n\n        require(maxAcceptanceBudget >= gasAndDataLimits.acceptanceBudget, \"acceptance budget too high\");\n        require(gasAndDataLimits.acceptanceBudget >= gasAndDataLimits.preRelayedCallGasLimit, \"acceptance budget too low\");\n\n        maxPossibleGas = relayRequest.relayData.transactionCalldataGasUsed + initialGasLeft;\n\n        uint256 maxPossibleCharge = calculateCharge(\n            maxPossibleGas,\n            relayRequest.relayData\n        );\n\n        // We don't yet know how much gas will be used by the recipient, so we make sure there are enough funds to pay\n        // for the maximum possible charge.\n        require(maxPossibleCharge <= balances[relayRequest.relayData.paymaster],\n            \"Paymaster balance too low\");\n    }\n\n    struct RelayCallData {\n        bool success;\n        bytes4 functionSelector;\n        uint256 initialGasLeft;\n        bytes recipientContext;\n        bytes relayedCallReturnValue;\n        IPaymaster.GasAndDataLimits gasAndDataLimits;\n        RelayCallStatus status;\n        uint256 innerGasUsed;\n        uint256 maxPossibleGas;\n        uint256 innerGasLimit;\n        uint256 gasBeforeInner;\n        uint256 gasUsed;\n        uint256 devCharge;\n        bytes retData;\n        address relayManager;\n        bytes32 relayRequestId;\n        uint256 tmpInitialGas;\n        bytes relayCallStatus;\n    }\n\n    /// @inheritdoc IRelayHub\n    function relayCall(\n        string calldata domainSeparatorName,\n        uint256 maxAcceptanceBudget,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData\n    )\n    external\n    override\n    returns (\n        bool paymasterAccepted,\n        uint256 charge,\n        IRelayHub.RelayCallStatus status,\n        bytes memory returnValue)\n    {\n        RelayCallData memory vars;\n        vars.initialGasLeft = aggregateGasleft();\n        vars.relayRequestId = GsnUtils.getRelayRequestID(relayRequest, signature);\n\n        // #if ENABLE_CONSOLE_LOG\n        console.log(\"relayCall relayRequestId\");\n        console.logBytes32(vars.relayRequestId);\n        console.log(\"relayCall relayRequest.request.from\", relayRequest.request.from);\n        console.log(\"relayCall relayRequest.request.to\", relayRequest.request.to);\n        console.log(\"relayCall relayRequest.request.value\", relayRequest.request.value);\n        console.log(\"relayCall relayRequest.request.gas\", relayRequest.request.gas);\n        console.log(\"relayCall relayRequest.request.nonce\", relayRequest.request.nonce);\n        console.log(\"relayCall relayRequest.request.validUntilTime\", relayRequest.request.validUntilTime);\n\n        console.log(\"relayCall relayRequest.relayData.maxFeePerGas\", relayRequest.relayData.maxFeePerGas);\n        console.log(\"relayCall relayRequest.relayData.maxPriorityFeePerGas\", relayRequest.relayData.maxPriorityFeePerGas);\n        console.log(\"relayCall relayRequest.relayData.transactionCalldataGasUsed\", relayRequest.relayData.transactionCalldataGasUsed);\n        console.log(\"relayCall relayRequest.relayData.relayWorker\", relayRequest.relayData.relayWorker);\n        console.log(\"relayCall relayRequest.relayData.paymaster\", relayRequest.relayData.paymaster);\n        console.log(\"relayCall relayRequest.relayData.forwarder\", relayRequest.relayData.forwarder);\n        console.log(\"relayCall relayRequest.relayData.clientId\", relayRequest.relayData.clientId);\n\n        console.log(\"relayCall domainSeparatorName\");\n        console.logString(domainSeparatorName);\n        console.log(\"relayCall signature\");\n        console.logBytes(signature);\n        console.log(\"relayCall approvalData\");\n        console.logBytes(approvalData);\n        console.log(\"relayCall relayRequest.request.data\");\n        console.logBytes(relayRequest.request.data);\n        console.log(\"relayCall relayRequest.relayData.paymasterData\");\n        console.logBytes(relayRequest.relayData.paymasterData);\n        console.log(\"relayCall maxAcceptanceBudget\", maxAcceptanceBudget);\n        // #endif\n\n        require(!isDeprecated(), \"hub deprecated\");\n        vars.functionSelector = relayRequest.request.data.length>=4 ? MinLibBytes.readBytes4(relayRequest.request.data, 0) : bytes4(0);\n\n        if (msg.sender != batchGateway && tx.origin != DRY_RUN_ADDRESS) {\n            require(signature.length != 0, \"missing signature or bad gateway\");\n            require(msg.sender == tx.origin, \"relay worker must be EOA\");\n            require(msg.sender == relayRequest.relayData.relayWorker, \"Not a right worker\");\n        }\n\n        if (tx.origin != DRY_RUN_ADDRESS) {\n            vars.relayManager = workerToManager[relayRequest.relayData.relayWorker];\n            require(vars.relayManager != address(0), \"Unknown relay worker\");\n            verifyRelayManagerStaked(vars.relayManager);\n        }\n\n        (vars.gasAndDataLimits, vars.maxPossibleGas) =\n            verifyGasAndDataLimits(maxAcceptanceBudget, relayRequest, vars.initialGasLeft);\n\n        RelayHubValidator.verifyTransactionPacking(domainSeparatorName,relayRequest,signature,approvalData);\n\n    {\n\n        //How much gas to pass down to innerRelayCall. must be lower than the default 63/64\n        // actually, min(gasleft*63/64, gasleft-GAS_RESERVE) might be enough.\n        vars.innerGasLimit = gasleft()*63/64- config.gasReserve;\n        vars.gasBeforeInner = aggregateGasleft();\n\n        /*\n        Preparing to calculate \"gasUseWithoutPost\":\n        MPG = calldataGasUsage + vars.initialGasLeft :: max possible gas, an approximate gas limit for the current transaction\n        GU1 = MPG - gasleft(called right before innerRelayCall) :: gas actually used by current transaction until that point\n        GU2 = innerGasLimit - gasleft(called inside the innerRelayCall just before preRelayedCall) :: gas actually used by innerRelayCall before calling postRelayCall\n        GWP1 = GU1 + GU2 :: gas actually used by the entire transaction before calling postRelayCall\n        TGO = config.gasOverhead + config.postOverhead :: extra that will be added to the charge to cover hidden costs\n        GWP = GWP1 + TGO :: transaction \"gas used without postRelayCall\"\n        */\n        vars.tmpInitialGas = relayRequest.relayData.transactionCalldataGasUsed + vars.initialGasLeft + vars.innerGasLimit + config.gasOverhead + config.postOverhead;\n        // Calls to the recipient are performed atomically inside an inner transaction which may revert in case of\n        // errors in the recipient. In either case (revert or regular execution) the return data encodes the\n        // RelayCallStatus value.\n        (vars.success, vars.relayCallStatus) = address(this).call{gas:vars.innerGasLimit}(\n            abi.encodeWithSelector(RelayHub.innerRelayCall.selector, domainSeparatorName, relayRequest, signature, approvalData, vars.gasAndDataLimits,\n            vars.tmpInitialGas - aggregateGasleft(), /* totalInitialGas */\n            vars.maxPossibleGas\n            )\n        );\n        vars.innerGasUsed = vars.gasBeforeInner-aggregateGasleft();\n        (vars.status, vars.relayedCallReturnValue) = abi.decode(vars.relayCallStatus, (RelayCallStatus, bytes));\n        if ( vars.relayedCallReturnValue.length>0 ) {\n            emit TransactionResult(vars.status, vars.relayedCallReturnValue);\n        }\n    }\n    {\n        if (!vars.success) {\n            //Failure cases where the PM doesn't pay\n            if (vars.status == RelayCallStatus.RejectedByPreRelayed ||\n                    (vars.innerGasUsed <= vars.gasAndDataLimits.acceptanceBudget + relayRequest.relayData.transactionCalldataGasUsed) && (\n                    vars.status == RelayCallStatus.RejectedByForwarder ||\n                    vars.status == RelayCallStatus.RejectedByRecipientRevert  //can only be thrown if rejectOnRecipientRevert==true\n                )) {\n                emit TransactionRejectedByPaymaster(\n                    vars.relayManager,\n                    relayRequest.relayData.paymaster,\n                    vars.relayRequestId,\n                    relayRequest.request.from,\n                    relayRequest.request.to,\n                    msg.sender,\n                    vars.functionSelector,\n                    vars.innerGasUsed,\n                    vars.relayedCallReturnValue);\n                return (false, 0, vars.status, vars.relayedCallReturnValue);\n            }\n        }\n\n        // We now perform the actual charge calculation, based on the measured gas used\n        vars.gasUsed = relayRequest.relayData.transactionCalldataGasUsed + (vars.initialGasLeft - aggregateGasleft()) + config.gasOverhead;\n        charge = calculateCharge(vars.gasUsed, relayRequest.relayData);\n        vars.devCharge = calculateDevCharge(charge);\n\n        balances[relayRequest.relayData.paymaster] = balances[relayRequest.relayData.paymaster] - charge;\n        balances[vars.relayManager] = balances[vars.relayManager] + (charge - vars.devCharge);\n        if (vars.devCharge > 0) { // save some gas in case of zero dev charge\n            balances[config.devAddress] = balances[config.devAddress] + vars.devCharge;\n        }\n\n        {\n            address from = relayRequest.request.from;\n            address to = relayRequest.request.to;\n            address paymaster = relayRequest.relayData.paymaster;\n            emit TransactionRelayed(\n                vars.relayManager,\n                msg.sender,\n                vars.relayRequestId,\n                from,\n                to,\n                paymaster,\n                vars.functionSelector,\n                vars.status,\n                charge);\n        }\n\n        // avoid variable size memory copying after gas calculation completed on-chain\n        if (tx.origin == DRY_RUN_ADDRESS) {\n            return (true, charge, vars.status, vars.relayedCallReturnValue);\n        }\n        return (true, charge, vars.status, \"\");\n    }\n    }\n\n    struct InnerRelayCallData {\n        uint256 initialGasLeft;\n        uint256 gasUsedToCallInner;\n        uint256 balanceBefore;\n        bytes32 preReturnValue;\n        bool relayedCallSuccess;\n        bytes relayedCallReturnValue;\n        bytes recipientContext;\n        bytes data;\n        bool rejectOnRecipientRevert;\n    }\n\n    /**\n     * @notice This method can only by called by this `RelayHub`.\n     * It wraps the execution of the `RelayRequest` in a revertable frame context.\n     */\n    function innerRelayCall(\n        string calldata domainSeparatorName,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        IPaymaster.GasAndDataLimits calldata gasAndDataLimits,\n        uint256 totalInitialGas,\n        uint256 maxPossibleGas\n    )\n    external\n    returns (RelayCallStatus, bytes memory)\n    {\n        InnerRelayCallData memory vars;\n        vars.initialGasLeft = aggregateGasleft();\n        vars.gasUsedToCallInner = totalInitialGas - gasleft();\n        // A new gas measurement is performed inside innerRelayCall, since\n        // due to EIP150 available gas amounts cannot be directly compared across external calls\n\n        // This external function can only be called by RelayHub itself, creating an internal transaction. Calls to the\n        // recipient (preRelayedCall, the relayedCall, and postRelayedCall) are called from inside this transaction.\n        require(msg.sender == address(this), \"Must be called by RelayHub\");\n\n        // If either pre or post reverts, the whole internal transaction will be reverted, reverting all side effects on\n        // the recipient. The recipient will still be charged for the used gas by the relay.\n\n        // The paymaster is no allowed to withdraw balance from RelayHub during a relayed transaction. We check pre and\n        // post state to ensure this doesn't happen.\n        vars.balanceBefore = balances[relayRequest.relayData.paymaster];\n\n        // First preRelayedCall is executed.\n        // Note: we open a new block to avoid growing the stack too much.\n        vars.data = abi.encodeWithSelector(\n            IPaymaster.preRelayedCall.selector,\n            relayRequest, signature, approvalData, maxPossibleGas\n        );\n        {\n            bool success;\n            bytes memory retData;\n            (success, retData) = relayRequest.relayData.paymaster.call{gas:gasAndDataLimits.preRelayedCallGasLimit}(vars.data);\n            if (!success) {\n                GsnEip712Library.truncateInPlace(retData);\n                revertWithStatus(RelayCallStatus.RejectedByPreRelayed, retData);\n            }\n            (vars.recipientContext, vars.rejectOnRecipientRevert) = abi.decode(retData, (bytes,bool));\n        }\n\n        // The actual relayed call is now executed. The sender's address is appended at the end of the transaction data\n\n        {\n            bool forwarderSuccess;\n            (forwarderSuccess, vars.relayedCallSuccess, vars.relayedCallReturnValue) = GsnEip712Library.execute(domainSeparatorName, relayRequest, signature);\n            if ( !forwarderSuccess ) {\n                revertWithStatus(RelayCallStatus.RejectedByForwarder, vars.relayedCallReturnValue);\n            }\n\n            if (vars.rejectOnRecipientRevert && !vars.relayedCallSuccess) {\n                // we trusted the recipient, but it reverted...\n                revertWithStatus(RelayCallStatus.RejectedByRecipientRevert, vars.relayedCallReturnValue);\n            }\n        }\n        // Finally, postRelayedCall is executed, with the relayedCall execution's status and a charge estimate\n        // We now determine how much the recipient will be charged, to pass this value to postRelayedCall for accurate\n        // accounting.\n        vars.data = abi.encodeWithSelector(\n            IPaymaster.postRelayedCall.selector,\n            vars.recipientContext,\n            vars.relayedCallSuccess,\n            vars.gasUsedToCallInner + (vars.initialGasLeft - aggregateGasleft()), /*gasUseWithoutPost*/\n            relayRequest.relayData\n        );\n\n        {\n        (bool successPost,bytes memory ret) = relayRequest.relayData.paymaster.call{gas:gasAndDataLimits.postRelayedCallGasLimit}(vars.data);\n\n            if (!successPost) {\n                revertWithStatus(RelayCallStatus.PostRelayedFailed, ret);\n            }\n        }\n\n        if (balances[relayRequest.relayData.paymaster] < vars.balanceBefore) {\n            revertWithStatus(RelayCallStatus.PaymasterBalanceChanged, \"\");\n        }\n\n        return (vars.relayedCallSuccess ? RelayCallStatus.OK : RelayCallStatus.RelayedCallFailed, vars.relayedCallReturnValue);\n    }\n\n    /**\n     * @dev Reverts the transaction with return data set to the ABI encoding of the status argument (and revert reason data)\n     */\n    function revertWithStatus(RelayCallStatus status, bytes memory ret) private pure {\n        bytes memory data = abi.encode(status, ret);\n        GsnEip712Library.truncateInPlace(data);\n\n        assembly {\n            let dataSize := mload(data)\n            let dataPtr := add(data, 32)\n\n            revert(dataPtr, dataSize)\n        }\n    }\n\n    /// @inheritdoc IRelayHub\n    function calculateDevCharge(uint256 charge) public override virtual view returns (uint256){\n        if (config.devFee == 0){ // save some gas in case of zero dev charge\n            return 0;\n        }\n        unchecked {\n        return charge * config.devFee / 100;\n        }\n    }\n\n    /// @inheritdoc IRelayHub\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) public override virtual view returns (uint256) {\n        uint256 basefee;\n        if (relayData.maxFeePerGas == relayData.maxPriorityFeePerGas) {\n            basefee = 0;\n        } else {\n            basefee = block.basefee;\n        }\n        uint256 chargeableGasPrice = Math.min(relayData.maxFeePerGas, Math.min(tx.gasprice, basefee + relayData.maxPriorityFeePerGas));\n        return config.baseRelayFee + (gasUsed * chargeableGasPrice * (config.pctRelayFee + 100)) / 100;\n    }\n\n    /// @inheritdoc IRelayHub\n    function verifyRelayManagerStaked(address relayManager) public override view {\n        (IStakeManager.StakeInfo memory info, bool isHubAuthorized) = stakeManager.getStakeInfo(relayManager);\n        uint256 minimumStake = minimumStakePerToken[info.token];\n        require(info.token != IERC20(address(0)), \"relay manager not staked\");\n        require(info.stake >= minimumStake, \"stake amount is too small\");\n        require(minimumStake != 0, \"staking this token is forbidden\");\n        require(info.unstakeDelay >= config.minimumUnstakeDelay, \"unstake delay is too small\");\n        require(info.withdrawTime == 0, \"stake has been withdrawn\");\n        require(isHubAuthorized, \"this hub is not authorized by SM\");\n    }\n\n    /// @inheritdoc IRelayHub\n    function deprecateHub(uint256 _deprecationTime) public override onlyOwner {\n        require(!isDeprecated(), \"Already deprecated\");\n        deprecationTime = _deprecationTime;\n        emit HubDeprecated(deprecationTime);\n    }\n\n    /// @inheritdoc IRelayHub\n    function isDeprecated() public override view returns (bool) {\n        return block.timestamp >= deprecationTime;\n    }\n\n    /// @notice Prevents any address other than the `Penalizer` from calling this method.\n    modifier penalizerOnly () {\n        require(msg.sender == penalizer, \"Not penalizer\");\n        _;\n    }\n\n    /// @inheritdoc IRelayHub\n    function penalize(address relayWorker, address payable beneficiary) external override penalizerOnly {\n        address relayManager = workerToManager[relayWorker];\n        // The worker must be controlled by a manager with a locked stake\n        require(relayManager != address(0), \"Unknown relay worker\");\n        (IStakeManager.StakeInfo memory stakeInfo,) = stakeManager.getStakeInfo(relayManager);\n        require(stakeInfo.stake > 0, \"relay manager not staked\");\n        stakeManager.penalizeRelayManager(relayManager, beneficiary, stakeInfo.stake);\n    }\n\n    /// @inheritdoc IRelayHub\n    function isRelayEscheatable(address relayManager) public view override returns (bool){\n        return stakeManager.isRelayEscheatable(relayManager);\n    }\n\n    /// @inheritdoc IRelayHub\n    function escheatAbandonedRelayBalance(address relayManager) external override onlyOwner {\n        require(stakeManager.isRelayEscheatable(relayManager), \"relay server not escheatable yet\");\n        uint256 balance = balances[relayManager];\n        balances[relayManager] = 0;\n        balances[config.devAddress] = balances[config.devAddress] + balance;\n        emit AbandonedRelayManagerBalanceEscheated(relayManager, balance);\n    }\n\n    /// @inheritdoc IRelayHub\n    function aggregateGasleft() public override virtual view returns (uint256){\n        return gasleft();\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@opengsn/contracts/src/utils/RelayHubValidator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../utils/GsnTypes.sol\";\n\n/**\n * @title The RelayHub Validator Library\n * @notice Validates the `msg.data` received by the `RelayHub` does not contain unnecessary bytes.\n * Including these extra bytes would allow the Relay Server to inflate transaction costs and overcharge the client.\n */\nlibrary RelayHubValidator {\n\n    /// @notice Validate that encoded `relayCall` is properly packed without any extra bytes\n    function verifyTransactionPacking(\n        string calldata domainSeparatorName,\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData\n    ) internal pure {\n        // abicoder v2: https://docs.soliditylang.org/en/latest/abi-spec.html\n        // each static param/member is 1 word\n        // struct (with dynamic members) has offset to struct which is 1 word\n        // dynamic member is 1 word offset to actual value, which is 1-word length and ceil(length/32) words for data\n        // relayCall has 5 method params,\n        // relayRequest: 2 members\n        // relayData 8 members\n        // ForwardRequest: 7 members\n        // total 21 32-byte words if all dynamic params are zero-length.\n        uint256 expectedMsgDataLen = 4 + 22 * 32 +\n            dynamicParamSize(bytes(domainSeparatorName)) +\n            dynamicParamSize(signature) +\n            dynamicParamSize(approvalData) +\n            dynamicParamSize(relayRequest.request.data) +\n            dynamicParamSize(relayRequest.relayData.paymasterData);\n        // zero-length signature is allowed in a batch relay transaction\n        require(expectedMsgDataLen == msg.data.length, \"extra msg.data bytes\" );\n    }\n\n    // helper method for verifyTransactionPacking:\n    // size (in bytes) of the given \"bytes\" parameter. size include the length (32-byte word),\n    // and actual data size, rounded up to full 32-byte words\n    function dynamicParamSize(bytes calldata buf) internal pure returns (uint256) {\n        return 32 + ((buf.length + 31) & (type(uint256).max - 31));\n    }\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IRelayRegistrar.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/interfaces/IERC165.sol\";\n\n/**\n * @title The RelayRegistrar Interface\n * @notice The on-chain registrar for all registered Relay Managers.\n *\n * @notice The client can use an implementation of a `RelayRegistrar` to find relay registration info.\n *\n */\ninterface IRelayRegistrar is IERC165 {\n\n    /**\n     * @notice A struct containing all the information necessary to client to interact with the Relay Server.\n     */\n    struct RelayInfo {\n        //last registration block number\n        uint32 lastSeenBlockNumber;\n        //last registration block timestamp\n        uint40 lastSeenTimestamp;\n        //stake (first registration) block number\n        uint32 firstSeenBlockNumber;\n        //stake (first registration) block timestamp\n        uint40 firstSeenTimestamp;\n        bytes32[3] urlParts;\n        address relayManager;\n    }\n\n    /**\n     * @notice Emitted when a relay server registers or updates its details.\n     * Looking up these events allows a client to discover registered Relay Servers.\n     */\n    event RelayServerRegistered(\n        address indexed relayManager,\n        address indexed relayHub,\n        bytes32[3] relayUrl\n    );\n\n    /**\n     * @notice This function is called by Relay Servers in order to register or to update their registration.\n     * @param relayHub The address of the `RelayHub` contract for which this action is performed.\n     * @param url The URL of the Relay Server that is listening to the clients' requests.\n     */\n    function registerRelayServer(\n        address relayHub,\n        bytes32[3] calldata url\n    ) external;\n\n    /**\n     * @return The block number in which the contract has been deployed.\n     */\n    function getCreationBlock() external view returns (uint256);\n\n    /**\n     * @return The maximum age the relay is considered registered by default by this `RelayRegistrar`, in seconds.\n     */\n    function getRelayRegistrationMaxAge() external view returns (uint256);\n\n    /**\n     * @notice Change the maximum relay registration age.\n     */\n    function setRelayRegistrationMaxAge(uint256) external;\n\n    /**\n     * @param relayManager An address of a Relay Manager.\n     * @param relayHub The address of the `RelayHub` contract for which this action is performed.\n     * @return info All the details of the given Relay Manager's registration. Throws if relay not found for `RelayHub`.\n     */\n    function getRelayInfo(address relayHub, address relayManager) external view returns (RelayInfo memory info);\n\n    /**\n     * @notice Read relay info of registered Relay Server from an on-chain storage.\n     * @param relayHub The address of the `RelayHub` contract for which this action is performed.\n     * @return info The list of `RelayInfo`s of registered Relay Servers\n     */\n    function readRelayInfos(\n        address relayHub\n    ) external view returns (\n        RelayInfo[] memory info\n    );\n\n    /**\n     * @notice Read relay info of registered Relay Server from an on-chain storage.\n     * @param relayHub The address of the `RelayHub` contract for which this action is performed.\n     * @param maxCount The maximum amount of relays to be returned by this function.\n     * @param oldestBlockNumber The latest block number in which a Relay Server may be registered.\n     * @param oldestBlockTimestamp The latest block timestamp in which a Relay Server may be registered.\n     * @return info The list of `RelayInfo`s of registered Relay Servers\n     */\n    function readRelayInfosInRange(\n        address relayHub,\n        uint256 oldestBlockNumber,\n        uint256 oldestBlockTimestamp,\n        uint256 maxCount\n    ) external view returns (\n        RelayInfo[] memory info\n    );\n}\n"
    },
    "contracts/helpers/TokenGasCalculator.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"@opengsn/contracts/src/RelayHub.sol\";\nimport \"@opengsn/contracts/src/BasePaymaster.sol\";\nimport \"./AllEvents.sol\";\n\n/**\n * Calculate the postRelayedCall gas usage for a TokenPaymaster.\n *\n */\ncontract TokenGasCalculator is RelayHub, AllEvents {\n\n    //(The Paymaster calls back calculateCharge, depositFor in the relayHub,\n    //so the calculator has to implement them just like a real RelayHub\n    // solhint-disable-next-line no-empty-blocks\n    constructor(\n        IStakeManager _stakeManager,\n        address _penalizer,\n        address _batchGateway,\n        address _relayRegistrar,\n        RelayHubConfig memory _config) RelayHub(_stakeManager,\n        _penalizer,\n        _batchGateway,\n        _relayRegistrar,\n        _config)\n        // solhint-disable-next-line no-empty-blocks\n    {}\n\n    /**\n     * calculate actual cost of postRelayedCall.\n     * usage:\n     * - create this calculator.\n     * - create an instance of your TokenPaymaster, with your token's Uniswap instance.\n     * - move some tokens (1000 \"wei\") to the calculator (msg.sender is given approval to pull them back at the end)\n     * - set the calculator as owner of this calculator.\n     * - call this method.\n     * - use the returned values to set your real TokenPaymaster.setPostGasUsage()\n     * the above can be ran on a \"forked\" network, so that it will have the real token, uniswap instances,\n     * but still leave no side-effect on the network.\n     */\n    function calculatePostGas(\n        BasePaymaster paymaster,\n        bytes memory ctx1,\n        bytes memory paymasterData\n    ) public returns (uint256 gasUsedByPost) {\n        GsnTypes.RelayData memory relayData = GsnTypes.RelayData(1, 1, 0, address(0), address(0), address(0), paymasterData, 0);\n\n        //with precharge\n        uint256 gas0 = gasleft();\n        paymaster.postRelayedCall(ctx1, true, 100, relayData);\n        uint256 gas1 = gasleft();\n        gasUsedByPost = gas0 - gas1;\n        emit GasUsed(gasUsedByPost);\n    }\n\n    event GasUsed(uint256 gasUsedByPost);\n}\n\n"
    },
    "contracts/helpers/AllEvents.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\n\n/**\n * In order to help the Truffle tests to decode events in the transactions' results,\n * the events must be declared in a top-level contract.\n * Implement this empty interface in order to add event signatures to any contract.\n *\n */\ninterface AllEvents {\n    event Received(address indexed sender, uint256 eth);\n    event Withdrawal(address indexed src, uint256 wad);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event TokensCharged(uint256 gasUseWithoutPost, uint256 gasJustPost, uint256 tokenActualCharge, uint256 ethActualCharge);\n    event UniswapReverted(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOutMin);\n\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n}\n"
    },
    "contracts/helpers/TestHub.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@opengsn/contracts/src/utils/GsnTypes.sol\";\nimport \"@opengsn/contracts/src/interfaces/IPaymaster.sol\";\n\nimport \"@opengsn/contracts/src/RelayHub.sol\";\n\nimport \"./AllEvents.sol\";\n\n/**\n * This mock relay hub contract is only used to test the paymaster's 'pre-' and 'postRelayedCall' in isolation.\n */\ncontract TestHub is RelayHub, AllEvents {\n\n    constructor(\n        IStakeManager _stakeManager,\n        address _penalizer,\n        address _batchGateway,\n        address _relayRegistrar,\n        RelayHubConfig memory _config) RelayHub(_stakeManager,\n        _penalizer,\n        _batchGateway,\n        _relayRegistrar,\n        _config)\n        // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function callPreRC(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    external\n    returns (bytes memory context, bool revertOnRecipientRevert) {\n        IPaymaster paymaster = IPaymaster(relayRequest.relayData.paymaster);\n        IPaymaster.GasAndDataLimits memory limits = paymaster.getGasAndDataLimits();\n        return paymaster.preRelayedCall{gas: limits.preRelayedCallGasLimit}(relayRequest, signature, approvalData, maxPossibleGas);\n    }\n\n    function callPostRC(\n        IPaymaster paymaster,\n        bytes calldata context,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    external {\n        IPaymaster.GasAndDataLimits memory limits = paymaster.getGasAndDataLimits();\n        paymaster.postRelayedCall{gas: limits.postRelayedCallGasLimit}(context, true, gasUseWithoutPost, relayData);\n    }\n}\n"
    },
    "contracts/PermitERC20UniswapV3Paymaster.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n\nimport \"@opengsn/contracts/src/forwarder/IForwarder.sol\";\nimport \"@opengsn/contracts/src/ERC2771Recipient.sol\";\nimport \"@opengsn/contracts/src/BasePaymaster.sol\";\nimport \"@opengsn/contracts/src/utils/GsnUtils.sol\";\n\nimport \"./interfaces/IChainlinkOracle.sol\";\n\nimport \"./helpers/UniswapV3Helper.sol\";\n\n/**\n * A paymaster allowing addresses holding ERC20 tokens with 'permit' functionality\n * to pay for a GSN transaction.\n */\ncontract PermitERC20UniswapV3Paymaster is BasePaymaster, ERC2771Recipient {\n\n    using SafeERC20 for IERC20;\n\n    event Received(address indexed sender, uint256 eth);\n    event TokensCharged(uint256 gasUseWithoutPost, uint256 gasJustPost, uint256 tokenActualCharge, uint256 ethActualCharge);\n\n    struct TokenSwapData {\n        IChainlinkOracle priceFeed;\n        // in case the chainlink oracle exposes price quote as \"ETH / Token\" we need to reverse the calculation\n        bool reverseQuote;\n        uint24 uniswapPoolFee;\n        // between 0 to 1000, with 2 decimals, that is, 10 = 1%\n        uint8 slippage;\n        bytes4 permitMethodSelector;\n        uint256 priceDivisor;\n        uint256 validFromBlockNumber;\n    }\n\n    mapping(IERC20 => TokenSwapData) public tokensSwapData;\n    ISwapRouter public uniswap;\n    IERC20[] public tokens;\n    IERC20 public weth;\n    uint256 public tokensBlockNumber;\n    uint256 public gasUsedByPost;\n    uint256 public minHubBalance;\n    uint256 public targetHubBalance;\n    uint256 public minWithdrawalAmount;\n    uint256 public minSwapAmount;\n    uint256 public paymasterFee;\n\n    struct UniswapConfig {\n        ISwapRouter uniswap;\n        IERC20 weth;\n        // Minimum eth amount to get from a swap\n        uint256 minSwapAmount;\n        IERC20[] tokens;\n        IChainlinkOracle[] priceFeeds;\n        uint24[] uniswapPoolFees;\n        string[] permitMethodSignatures;\n        uint8[] slippages;\n        bool[] reverseQuotes;\n    }\n\n    struct GasAndEthConfig {\n        /**\n        * set gas used by postRelayedCall, for proper gas calculation.\n        * You can use TokenGasCalculator to calculate these values (they depend on actual code of postRelayedCall,\n        * but also the gas usage of the token and of Uniswap)\n        */\n        uint256 gasUsedByPost;\n        // Upon reaching minHubBalance, the paymaster will deposit eth to RelayHub to reach targetHubBalance\n        uint256 minHubBalance;\n        uint256 targetHubBalance;\n        // Minimum eth amount, above targetHubBalance, to send to the owner\n        uint256 minWithdrawalAmount;\n        uint256 paymasterFee;\n    }\n\n    constructor(\n        UniswapConfig memory uniswapConfig,\n        GasAndEthConfig memory gasAndEthConfig,\n        address _trustedForwarder,\n        IRelayHub _relayHub\n    ) {\n        setUniswapConfig(uniswapConfig);\n        setGasAndEthConfig(gasAndEthConfig);\n\n        setRelayHub(_relayHub);\n        setTrustedForwarder(_trustedForwarder);\n    }\n\n    function setUniswapConfig(UniswapConfig memory config) public onlyOwner {\n        weth = config.weth;\n        uniswap = config.uniswap;\n        minSwapAmount = config.minSwapAmount;\n        setTokens(config.tokens, config.priceFeeds, config.permitMethodSignatures, config.uniswapPoolFees, config.reverseQuotes, config.slippages);\n    }\n\n    function setGasAndEthConfig(GasAndEthConfig memory config) public onlyOwner {\n        minWithdrawalAmount = config.minWithdrawalAmount;\n        gasUsedByPost = config.gasUsedByPost;\n        targetHubBalance = config.targetHubBalance;\n        minHubBalance = config.minHubBalance;\n        paymasterFee = config.paymasterFee;\n    }\n\n    function setTokens(\n        IERC20[] memory _tokens,\n        IChainlinkOracle[] memory _priceFeeds,\n        string[] memory _permitMethodSignatures,\n        uint24[] memory _poolFees,\n        bool[] memory _reverseQuote,\n        uint8[] memory _slippages) private {\n        tokens = _tokens;\n        uint256 blockNumber = block.number;\n        tokensBlockNumber = blockNumber;\n        // allow uniswap to transfer from paymaster balance\n        for (uint256 i = 0; i < tokens.length; i++) {\n            TokenSwapData memory data;\n            IERC20 token = tokens[i];\n            token.approve(address(uniswap), type(uint256).max);\n            data.priceDivisor = 10 ** uint256(_priceFeeds[i].decimals() + IERC20Metadata(address(token)).decimals());\n            data.priceFeed = _priceFeeds[i];\n            data.reverseQuote = _reverseQuote[i];\n            data.permitMethodSelector = bytes4(keccak256(bytes(_permitMethodSignatures[i])));\n            data.uniswapPoolFee = _poolFees[i];\n            require(_slippages[i] <= 1000, \"slippage above 100%\");\n            data.slippage = _slippages[i];\n            data.validFromBlockNumber = blockNumber;\n            tokensSwapData[token] = data;\n        }\n    }\n\n    function getTokens() public view returns (IERC20[] memory){\n        return tokens;\n    }\n\n    function getTokenSwapData(IERC20 token) public view returns (TokenSwapData memory) {\n        return tokensSwapData[token];\n    }\n\n    function refillHubDeposit(uint256 amount) public payable onlyOwner {\n        _refillHubDeposit(amount);\n    }\n\n    function withdrawTokens(IERC20[] calldata _tokens, address target, uint256[] calldata amounts) public onlyOwner {\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            _tokens[i].safeTransfer(target, amounts[i]);\n        }\n    }\n\n    function _calculateCharge(\n        GsnTypes.RelayData calldata relayData,\n        uint256 gasUsed,\n        uint256 priceQuote,\n        bool reverseQuote\n    ) internal\n    view\n    returns (uint256 tokenCharge, uint256 ethCharge) {\n        ethCharge = relayHub.calculateCharge(gasUsed, relayData);\n        tokenCharge = addPaymasterFee(weiToToken(ethCharge, priceQuote, reverseQuote));\n    }\n\n    function toActualQuote(uint256 quote, uint256 divisor) public pure returns (uint256) {\n        // converting oracle token-to-eth answer, to token to wei (*1e18), packing divisor (/divisor) to it\n        // multiplying by 1e36 to avoid loss of precision by dividing by divisor\n        return 1e36 * 1e18 * quote / divisor;\n    }\n\n    function tokenToWei(uint256 amount, uint256 quote, bool reverse) public pure returns (uint256) {\n        if (reverse){\n            return weiToToken(amount, quote, false);\n        }\n        return amount * quote / 1e36;\n    }\n\n    function weiToToken(uint256 amount, uint256 quote, bool reverse) public pure returns (uint256) {\n        if (reverse){\n            return tokenToWei(amount, quote, false);\n        }\n        return amount * 1e36 / quote;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function _verifyPaymasterData(GsnTypes.RelayRequest calldata relayRequest) internal virtual override view {}\n\n    function isTokenSupported(IERC20 token) public view returns (bool) {\n        return tokensSwapData[token].validFromBlockNumber == tokensBlockNumber;\n    }\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    returns (bytes memory, bool) {\n        (signature, approvalData);\n        bytes calldata paymasterData = relayRequest.relayData.paymasterData;\n        // paymasterData must contain the token address, and optionally a a valid \"permit\" call on the token.\n        require(paymasterData.length >= 20, \"must contain token address\");\n        IERC20 token = _getTokenFromPaymasterData(paymasterData);\n        require(isTokenSupported(token),\"unsupported token\");\n        TokenSwapData memory tokenSwapData = tokensSwapData[token];\n        if (paymasterData.length != 20) {\n            require(paymasterData.length >= 24, \"must contain \\\"permit\\\" and token\");\n            require(\n                tokenSwapData.permitMethodSelector == GsnUtils.getMethodSig(paymasterData[20:]),\n                \"wrong \\\"permit\\\" method sig\");\n            // execute permit method for this token\n            {\n                // solhint-disable-next-line avoid-low-level-calls\n                (bool success, bytes memory ret) = address(token).call(paymasterData[20:]);\n                require(success, string(abi.encodePacked(\"permit call reverted:\", string(ret))));\n            }\n        }\n\n        uint256 priceQuote = toActualQuote(uint256(tokenSwapData.priceFeed.latestAnswer()),tokenSwapData.priceDivisor);\n\n        (uint256 tokenPreCharge,) = _calculateCharge(relayRequest.relayData, maxPossibleGas, priceQuote, tokenSwapData.reverseQuote);\n        address payer = relayRequest.request.from;\n        token.safeTransferFrom(payer, address(this), tokenPreCharge);\n        return (abi.encode(token, payer, priceQuote, tokenPreCharge, tokenSwapData.reverseQuote), false);\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    {\n        (IERC20 token, address payer, uint256 priceQuote, uint256 tokenPreCharge, bool reverseQuote) = abi.decode(context, (IERC20, address, uint256, uint256, bool));\n        (uint256 tokenActualCharge, uint256 ethActualCharge) = _calculateCharge(relayData, gasUseWithoutPost + gasUsedByPost, priceQuote, reverseQuote);\n        require(tokenActualCharge <= tokenPreCharge, \"actual charge higher\");\n        token.safeTransfer(payer, tokenPreCharge - tokenActualCharge);\n\n        emit TokensCharged(gasUseWithoutPost, gasUsedByPost, tokenActualCharge, ethActualCharge);\n        _refillHubDepositIfNeeded(ethActualCharge);\n        _withdrawToOwnerIfNeeded();\n    }\n\n    function _refillHubDepositIfNeeded(uint256 ethActualCharge) private {\n        uint256 hubBalance = relayHub.balanceOf(address(this));\n        if (hubBalance >= minHubBalance + ethActualCharge) {\n            return;\n        }\n        uint256 depositAmount = targetHubBalance - hubBalance + ethActualCharge;\n        _refillHubDeposit(depositAmount);\n    }\n\n    function _refillHubDeposit(uint256 depositAmount) private {\n        uint256 balance = address(this).balance;\n        uint256 amountSwapped = 0;\n        if (balance < depositAmount) {\n            for (uint256 i = 0; i < tokens.length && balance + amountSwapped < depositAmount; i++) {\n                amountSwapped += _maybeSwapTokenToWeth(tokens[i]);\n            }\n            if (amountSwapped > 0) {\n                UniswapV3Helper.unwrapWeth(uniswap, amountSwapped);\n            }\n        }\n        if (balance + amountSwapped > 0) {\n            relayHub.depositFor{value : balance + amountSwapped}(address(this));\n        }\n    }\n\n    function _maybeSwapTokenToWeth(IERC20 tokenIn) private returns (uint256) {\n        uint256 tokenBalance = tokenIn.balanceOf(address(this));\n        if (tokenBalance > 0) {\n            TokenSwapData memory tokenSwapData = tokensSwapData[tokenIn];\n            uint256 quote = toActualQuote(uint256(tokenSwapData.priceFeed.latestAnswer()), tokenSwapData.priceDivisor);\n            uint256 amountOutMin = addSlippage(tokenToWei(tokenBalance, quote, tokenSwapData.reverseQuote), tokenSwapData.slippage);\n            if (amountOutMin < minSwapAmount) {\n                return 0;\n            }\n            return UniswapV3Helper.swapToToken(\n                address(tokenIn),\n                address(weth),\n                tokenBalance,\n                amountOutMin,\n                tokenSwapData.uniswapPoolFee,\n                uniswap\n            );\n        }\n        return 0;\n    }\n\n    function _withdrawToOwnerIfNeeded() private {\n        uint256 hubBalance = relayHub.balanceOf(address(this));\n        if (hubBalance >= minWithdrawalAmount + targetHubBalance) {\n        relayHub.withdraw(payable(owner()), hubBalance - targetHubBalance);\n        }\n    }\n\n    function _getTokenFromPaymasterData(bytes calldata paymasterData) internal pure returns (IERC20) {\n        return IERC20(address(bytes20(paymasterData[:20])));\n    }\n\n    function addPaymasterFee(uint256 charge) public view returns (uint256) {\n        return charge * (100 + paymasterFee) / 100;\n    }\n\n    function addSlippage(uint256 amount, uint8 slippage) public pure returns (uint256) {\n        return amount * (1000 - slippage) / 1000;\n    }\n\n    // as this Paymaster already has a permission from a user to operate the tokens on behalf of the gasless account,\n    // it makes this same Paymaster a great recipient of a transaction if its only action is a pure token transfer\n    function transferToken(IERC20 token, address target, uint256 value) external {\n        require(msg.sender == getTrustedForwarder(), \"must be a meta-tx\");\n        token.safeTransferFrom(_msgSender(), target, value);\n    }\n\n    receive() external override payable {\n        emit Received(msg.sender, msg.value);\n    }\n\n    function getGasAndDataLimits() public override pure returns (IPaymaster.GasAndDataLimits memory limits) {\n        return IPaymaster.GasAndDataLimits(\n            2e5,\n            2e5,\n            4e5,\n            CALLDATA_SIZE_LIMIT\n        );\n    }\n\n    function versionPaymaster() external override virtual view returns (string memory){\n        return \"3.0.0-beta.3+opengsn.permit-erc20-uniswap-v3.ipaymaster\";\n    }\n\n    function getTrustedForwarder() override(BasePaymaster, ERC2771Recipient) public view returns (address forwarder){\n        forwarder = ERC2771Recipient.getTrustedForwarder();\n    }\n\n    function setTrustedForwarder(address _forwarder) public override onlyOwner {\n        _setTrustedForwarder(_forwarder);\n    }\n\n    function _msgSender() internal view override(Context, ERC2771Recipient) returns (address sender) {\n        sender = ERC2771Recipient._msgSender();\n    }\n\n    function _msgData() internal view override(Context, ERC2771Recipient) returns (bytes memory) {\n        return ERC2771Recipient._msgData();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@opengsn/contracts/src/ERC2771Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable no-inline-assembly\npragma solidity >=0.6.9;\n\nimport \"./interfaces/IERC2771Recipient.sol\";\n\n/**\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\n *\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\n *\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\n *\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\n */\nabstract contract ERC2771Recipient is IERC2771Recipient {\n\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address private _trustedForwarder;\n\n    /**\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\n     * @return forwarder The address of the Forwarder contract that is being used.\n     */\n    function getTrustedForwarder() public virtual view returns (address forwarder){\n        return _trustedForwarder;\n    }\n\n    function _setTrustedForwarder(address _forwarder) internal {\n        _trustedForwarder = _forwarder;\n    }\n\n    /// @inheritdoc IERC2771Recipient\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    /// @inheritdoc IERC2771Recipient\n    function _msgSender() internal override virtual view returns (address ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            ret = msg.sender;\n        }\n    }\n\n    /// @inheritdoc IERC2771Recipient\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            return msg.data[0:msg.data.length-20];\n        } else {\n            return msg.data;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\n\ninterface IChainlinkOracle {\n    function decimals()\n    external\n    view\n    returns (\n        uint8\n    );\n\n    function latestAnswer() external view returns (int256);\n}\n"
    },
    "contracts/helpers/UniswapV3Helper.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\npragma experimental ABIEncoderV2;\n\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\";\n\nlibrary UniswapV3Helper {\n    event UniswapReverted(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOutMin);\n    // turn ERC-20 tokens into wrapped ETH at market price\n    function swapToWeth(\n        address token,\n        address weth,\n        uint256 amountOut,\n        uint24 fee,\n        ISwapRouter uniswap\n    ) internal returns (uint256 amountIn) {\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams(\n            token, //tokenIn\n            weth, //tokenOut\n            fee,\n            address(uniswap), //recipient - keep WETH at SwapRouter for withdrawal\n            // solhint-disable-next-line not-rely-on-time\n            block.timestamp, //deadline\n            amountOut,\n            type(uint256).max,\n            0\n        );\n        amountIn = uniswap.exactOutputSingle(params);\n    }\n\n    function unwrapWeth(ISwapRouter uniswap, uint256 amount) internal {\n        IPeripheryPayments(address(uniswap)).unwrapWETH9(amount, address(this));\n    }\n\n    // swap ERC-20 tokens at market price\n    function swapToToken(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint24 fee,\n        ISwapRouter uniswap\n    ) internal returns (uint256 amountOut) {\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams(\n            tokenIn, //tokenIn\n            tokenOut, //tokenOut\n            fee,\n            address(uniswap),\n        // solhint-disable-next-line not-rely-on-time\n            block.timestamp, //deadline\n            amountIn,\n            amountOutMin,\n            0\n        );\n        try uniswap.exactInputSingle(params) returns (uint256 _amountOut) {\n            amountOut = _amountOut;\n        } catch {\n            emit UniswapReverted(tokenIn, tokenOut, amountIn, amountOutMin);\n            amountOut = 0;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "contracts/helpers/TestProxy.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@opengsn/contracts/src/ERC2771Recipient.sol\";\n\ncontract TestProxy is ERC2771Recipient, Ownable  {\n\n    constructor(address forwarder) {\n        _setTrustedForwarder(forwarder);\n    }\n\n    function isOwner() public view returns (bool) {\n        return _msgSender() == owner();\n    }\n\n    event Test(address _msgSender, address msgSender);\n    //not a proxy method; just for testing.\n    function test() public {\n        emit Test(_msgSender(), msg.sender);\n    }\n\n    function execute(address target, bytes calldata func) external onlyOwner {\n\n        //solhint-disable-next-line\n        (bool success, bytes memory ret) = target.call(func);\n        require(success, string(ret));\n    }\n\n    function _msgSender() internal override(Context, ERC2771Recipient) view returns (address) {\n        return ERC2771Recipient._msgSender();\n    }\n\n    function _msgData() internal override(Context, ERC2771Recipient) view returns (bytes memory) {\n        return ERC2771Recipient._msgData();\n    }\n}\n"
    },
    "@opengsn/contracts/src/utils/RelayRegistrar.sol": {
      "content": "// solhint-disable not-rely-on-time\n//SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.6;\n/* solhint-disable no-inline-assembly */\n\n// #if ENABLE_CONSOLE_LOG\nimport \"hardhat/console.sol\";\n// #endif\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./MinLibBytes.sol\";\nimport \"../interfaces/IRelayHub.sol\";\nimport \"../interfaces/IRelayRegistrar.sol\";\n\n/**\n * @title The RelayRegistrar Implementation\n * @notice Keeps a list of registered relayers.\n *\n * @notice Provides view functions to read the list of registered relayers and filters out invalid ones.\n *\n * @notice Protects the list from spamming entries: only staked relayers are added.\n */\ncontract RelayRegistrar is IRelayRegistrar, Ownable, ERC165 {\n    using MinLibBytes for bytes;\n\n    uint256 private constant MAX_RELAYS_RETURNED_COUNT = 1000;\n\n    /// @notice Mapping from `RelayHub` address to a mapping from a Relay Manager address to its registration details.\n    mapping(address => mapping(address => RelayInfo)) internal values;\n\n    /// @notice Mapping from `RelayHub` address to an array of Relay Managers that are registered on that `RelayHub`.\n    mapping(address => address[]) internal indexedValues;\n\n    uint256 private immutable creationBlock;\n\n    uint256 private relayRegistrationMaxAge;\n\n    constructor(uint256 _relayRegistrationMaxAge) {\n        setRelayRegistrationMaxAge(_relayRegistrationMaxAge);\n        creationBlock = block.number;\n    }\n\n    /// @inheritdoc IRelayRegistrar\n    function getCreationBlock() external override view returns (uint256){\n        return creationBlock;\n    }\n\n    /// @inheritdoc IRelayRegistrar\n    function getRelayRegistrationMaxAge() external override view returns (uint256){\n        return relayRegistrationMaxAge;\n    }\n\n    /// @inheritdoc IRelayRegistrar\n    function setRelayRegistrationMaxAge(uint256 _relayRegistrationMaxAge) public override onlyOwner {\n        relayRegistrationMaxAge = _relayRegistrationMaxAge;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IRelayRegistrar).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IRelayRegistrar\n    function registerRelayServer(\n        address relayHub,\n        bytes32[3] calldata url\n    ) external override {\n        address relayManager = msg.sender;\n        IRelayHub(relayHub).onRelayServerRegistered(relayManager);\n        emit RelayServerRegistered(relayManager, relayHub, url);\n        storeRelayServerRegistration(relayManager, relayHub, url);\n    }\n\n    function addItem(address relayHub, address relayManager) internal returns (RelayInfo storage) {\n        RelayInfo storage storageInfo = values[relayHub][relayManager];\n        if (storageInfo.lastSeenBlockNumber == 0) {\n            indexedValues[relayHub].push(relayManager);\n        }\n        return storageInfo;\n    }\n\n    function storeRelayServerRegistration(\n        address relayManager,\n        address relayHub,\n        bytes32[3] calldata url\n    ) internal {\n        RelayInfo storage storageInfo = addItem(relayHub, relayManager);\n        if (storageInfo.firstSeenBlockNumber == 0) {\n            storageInfo.firstSeenBlockNumber = uint32(block.number);\n            storageInfo.firstSeenTimestamp = uint40(block.timestamp);\n        }\n        storageInfo.lastSeenBlockNumber = uint32(block.number);\n        storageInfo.lastSeenTimestamp = uint40(block.timestamp);\n        storageInfo.relayManager = relayManager;\n        storageInfo.urlParts = url;\n    }\n\n    /// @inheritdoc IRelayRegistrar\n    function getRelayInfo(address relayHub, address relayManager) public view override returns (RelayInfo memory) {\n        RelayInfo memory info = values[relayHub][relayManager];\n        require(info.lastSeenBlockNumber != 0, \"relayManager not found\");\n        return info;\n    }\n\n    /// @inheritdoc IRelayRegistrar\n    function readRelayInfos(\n        address relayHub\n    )\n    public\n    view\n    override\n    returns (\n        RelayInfo[] memory info\n    ) {\n        uint256 blockTimestamp = block.timestamp;\n        uint256 oldestBlockTimestamp = blockTimestamp >= relayRegistrationMaxAge ? blockTimestamp - relayRegistrationMaxAge : 0;\n        return readRelayInfosInRange(relayHub, 0, oldestBlockTimestamp, MAX_RELAYS_RETURNED_COUNT);\n    }\n\n    /// @inheritdoc IRelayRegistrar\n    function readRelayInfosInRange(\n        address relayHub,\n        uint256 oldestBlockNumber,\n        uint256 oldestBlockTimestamp,\n        uint256 maxCount\n    )\n    public\n    view\n    override\n    returns (\n        RelayInfo[] memory info\n    ) {\n        address[] storage items = indexedValues[relayHub];\n        uint256 filled = 0;\n        info = new RelayInfo[](items.length < maxCount ? items.length : maxCount);\n        for (uint256 i = 0; i < items.length; i++) {\n            address relayManager = items[i];\n            RelayInfo memory relayInfo = getRelayInfo(relayHub, relayManager);\n            if (\n                relayInfo.lastSeenBlockNumber < oldestBlockNumber ||\n                relayInfo.lastSeenTimestamp < oldestBlockTimestamp\n            ) {\n                continue;\n            }\n            // solhint-disable-next-line no-empty-blocks\n            try IRelayHub(relayHub).verifyRelayManagerStaked(relayManager) {\n            } catch (bytes memory /*lowLevelData*/) {\n                continue;\n            }\n            info[filled++] = relayInfo;\n            if (filled >= maxCount)\n                break;\n        }\n        assembly { mstore(info, filled) }\n    }\n}\n"
    },
    "@opengsn/contracts/src/StakeManager.sol": {
      "content": "// solhint-disable not-rely-on-time\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./interfaces/IStakeManager.sol\";\n\n/**\n * @title The StakeManager implementation\n * @notice An IStakeManager instance that accepts stakes in any ERC-20 token.\n *\n * @notice Single StakeInfo of a single RelayManager can only have one token address assigned to it.\n *\n * @notice It cannot be changed after the first time 'stakeForRelayManager' is called as it is equivalent to withdrawal.\n */\ncontract StakeManager is IStakeManager, Ownable, ERC165 {\n    using SafeERC20 for IERC20;\n\n    string public override versionSM = \"3.0.0-beta.3+opengsn.stakemanager.istakemanager\";\n    uint256 internal immutable maxUnstakeDelay;\n\n    AbandonedRelayServerConfig internal abandonedRelayServerConfig;\n\n    address internal burnAddress;\n    uint256 internal immutable creationBlock;\n\n    /// maps relay managers to their stakes\n    mapping(address => StakeInfo) public stakes;\n\n    /// @inheritdoc IStakeManager\n    function getStakeInfo(address relayManager) external override view returns (StakeInfo memory stakeInfo, bool isSenderAuthorizedHub) {\n        bool isHubAuthorized = authorizedHubs[relayManager][msg.sender].removalTime == type(uint256).max;\n        return (stakes[relayManager], isHubAuthorized);\n    }\n\n    /// @inheritdoc IStakeManager\n    function setBurnAddress(address _burnAddress) public override onlyOwner {\n        burnAddress = _burnAddress;\n        emit BurnAddressSet(burnAddress);\n    }\n\n    /// @inheritdoc IStakeManager\n    function getBurnAddress() external override view returns (address) {\n        return burnAddress;\n    }\n\n    /// @inheritdoc IStakeManager\n    function setDevAddress(address _devAddress) public override onlyOwner {\n        abandonedRelayServerConfig.devAddress = _devAddress;\n        emit DevAddressSet(abandonedRelayServerConfig.devAddress);\n    }\n\n    /// @inheritdoc IStakeManager\n    function getAbandonedRelayServerConfig() external override view returns (AbandonedRelayServerConfig memory) {\n        return abandonedRelayServerConfig;\n    }\n\n    /// @inheritdoc IStakeManager\n    function getMaxUnstakeDelay() external override view returns (uint256) {\n        return maxUnstakeDelay;\n    }\n\n    /// maps relay managers to a map of addressed of their authorized hubs to the information on that hub\n    mapping(address => mapping(address => RelayHubInfo)) public authorizedHubs;\n\n    constructor(\n        uint256 _maxUnstakeDelay,\n        uint256 _abandonmentDelay,\n        uint256 _escheatmentDelay,\n        address _burnAddress,\n        address _devAddress\n    ) {\n        require(_burnAddress != address(0), \"transfers to address(0) may fail\");\n        setBurnAddress(_burnAddress);\n        setDevAddress(_devAddress);\n        creationBlock = block.number;\n        maxUnstakeDelay = _maxUnstakeDelay;\n        abandonedRelayServerConfig.abandonmentDelay = _abandonmentDelay;\n        abandonedRelayServerConfig.escheatmentDelay = _escheatmentDelay;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IStakeManager).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IStakeManager\n    function getCreationBlock() external override view returns (uint256){\n        return creationBlock;\n    }\n\n    /// @inheritdoc IStakeManager\n    function setRelayManagerOwner(address owner) external override {\n        require(owner != address(0), \"invalid owner\");\n        require(stakes[msg.sender].owner == address(0), \"already owned\");\n        stakes[msg.sender].owner = owner;\n        emit OwnerSet(msg.sender, owner);\n    }\n\n    /// @inheritdoc IStakeManager\n    function stakeForRelayManager(IERC20 token, address relayManager, uint256 unstakeDelay, uint256 amount) external override relayOwnerOnly(relayManager) {\n        require(unstakeDelay >= stakes[relayManager].unstakeDelay, \"unstakeDelay cannot be decreased\");\n        require(unstakeDelay <= maxUnstakeDelay, \"unstakeDelay too big\");\n        require(token != IERC20(address(0)), \"must specify stake token address\");\n        require(\n            stakes[relayManager].token == IERC20(address(0)) ||\n            stakes[relayManager].token == token,\n            \"stake token address is incorrect\");\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        stakes[relayManager].token = token;\n        stakes[relayManager].stake += amount;\n        stakes[relayManager].unstakeDelay = unstakeDelay;\n        emit StakeAdded(relayManager, stakes[relayManager].owner, stakes[relayManager].token, stakes[relayManager].stake, stakes[relayManager].unstakeDelay);\n    }\n\n    /// @inheritdoc IStakeManager\n    function unlockStake(address relayManager) external override relayOwnerOnly(relayManager) {\n        StakeInfo storage info = stakes[relayManager];\n        require(info.withdrawTime == 0, \"already pending\");\n        info.withdrawTime = block.timestamp + info.unstakeDelay;\n        emit StakeUnlocked(relayManager, msg.sender, info.withdrawTime);\n    }\n\n    /// @inheritdoc IStakeManager\n    function withdrawStake(address relayManager) external override relayOwnerOnly(relayManager) {\n        StakeInfo storage info = stakes[relayManager];\n        require(info.withdrawTime > 0, \"Withdrawal is not scheduled\");\n        require(info.withdrawTime <= block.timestamp, \"Withdrawal is not due\");\n        uint256 amount = info.stake;\n        info.stake = 0;\n        info.withdrawTime = 0;\n        info.token.safeTransfer(msg.sender, amount);\n        emit StakeWithdrawn(relayManager, msg.sender, info.token, amount);\n    }\n\n    /// @notice Prevents any address other than a registered Relay Owner from calling this method.\n    modifier relayOwnerOnly (address relayManager) {\n        StakeInfo storage info = stakes[relayManager];\n        require(info.owner == msg.sender, \"not owner\");\n        _;\n    }\n\n    /// @notice Prevents any address other than a registered Relay Manager from calling this method.\n    modifier managerOnly () {\n        StakeInfo storage info = stakes[msg.sender];\n        require(info.owner != address(0), \"not manager\");\n        _;\n    }\n\n    /// @inheritdoc IStakeManager\n    function authorizeHubByOwner(address relayManager, address relayHub) external relayOwnerOnly(relayManager) override {\n        _authorizeHub(relayManager, relayHub);\n    }\n\n    /// @inheritdoc IStakeManager\n    function authorizeHubByManager(address relayHub) external managerOnly override {\n        _authorizeHub(msg.sender, relayHub);\n    }\n\n    function _authorizeHub(address relayManager, address relayHub) internal {\n        authorizedHubs[relayManager][relayHub].removalTime = type(uint256).max;\n        emit HubAuthorized(relayManager, relayHub);\n    }\n\n    /// @inheritdoc IStakeManager\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external override relayOwnerOnly(relayManager) {\n        _unauthorizeHub(relayManager, relayHub);\n    }\n\n    /// @inheritdoc IStakeManager\n    function unauthorizeHubByManager(address relayHub) external override managerOnly {\n        _unauthorizeHub(msg.sender, relayHub);\n    }\n\n    function _unauthorizeHub(address relayManager, address relayHub) internal {\n        RelayHubInfo storage hubInfo = authorizedHubs[relayManager][relayHub];\n        require(hubInfo.removalTime == type(uint256).max, \"hub not authorized\");\n        hubInfo.removalTime = block.timestamp + stakes[relayManager].unstakeDelay;\n        emit HubUnauthorized(relayManager, relayHub, hubInfo.removalTime);\n    }\n\n    /// @inheritdoc IStakeManager\n    function penalizeRelayManager(address relayManager, address beneficiary, uint256 amount) external override {\n        uint256 removalTime = authorizedHubs[relayManager][msg.sender].removalTime;\n        require(removalTime != 0, \"hub not authorized\");\n        require(removalTime > block.timestamp, \"hub authorization expired\");\n\n        // Half of the stake will be burned (sent to address 0)\n        require(stakes[relayManager].stake >= amount, \"penalty exceeds stake\");\n        stakes[relayManager].stake =stakes[relayManager].stake - amount;\n\n        uint256 toBurn = amount / 2;\n        uint256 reward = amount - toBurn;\n\n        // Stake ERC-20 token is burned and transferred\n        stakes[relayManager].token.safeTransfer(burnAddress, toBurn);\n        stakes[relayManager].token.safeTransfer(beneficiary, reward);\n        emit StakePenalized(relayManager, beneficiary, stakes[relayManager].token, reward);\n    }\n\n    /// @inheritdoc IStakeManager\n    function isRelayEscheatable(address relayManager) public view override returns (bool) {\n        IStakeManager.StakeInfo memory stakeInfo = stakes[relayManager];\n        return stakeInfo.abandonedTime != 0 && stakeInfo.abandonedTime + abandonedRelayServerConfig.escheatmentDelay < block.timestamp;\n    }\n\n    /// @inheritdoc IStakeManager\n    function markRelayAbandoned(address relayManager) external override onlyOwner {\n        StakeInfo storage info = stakes[relayManager];\n        require(info.stake > 0, \"relay manager not staked\");\n        require(info.abandonedTime == 0, \"relay manager already abandoned\");\n        require(info.keepaliveTime + abandonedRelayServerConfig.abandonmentDelay < block.timestamp, \"relay manager was alive recently\");\n        info.abandonedTime = block.timestamp;\n        emit RelayServerAbandoned(relayManager, info.abandonedTime);\n    }\n\n    /// @inheritdoc IStakeManager\n    function escheatAbandonedRelayStake(address relayManager) external override onlyOwner {\n        StakeInfo storage info = stakes[relayManager];\n        require(isRelayEscheatable(relayManager), \"relay server not escheatable yet\");\n        uint256 amount = info.stake;\n        info.stake = 0;\n        info.withdrawTime = 0;\n        info.token.safeTransfer(abandonedRelayServerConfig.devAddress, amount);\n        emit AbandonedRelayManagerStakeEscheated(relayManager, msg.sender, info.token, amount);\n    }\n\n    /// @inheritdoc IStakeManager\n    function updateRelayKeepaliveTime(address relayManager) external override {\n        StakeInfo storage info = stakes[relayManager];\n        bool isHubAuthorized = authorizedHubs[relayManager][msg.sender].removalTime == type(uint256).max;\n        bool isRelayOwner = info.owner == msg.sender;\n        require(isHubAuthorized || isRelayOwner, \"must be called by owner or hub\");\n        info.abandonedTime = 0;\n        info.keepaliveTime = block.timestamp;\n        emit RelayServerKeepalive(relayManager, info.keepaliveTime);\n    }\n}\n"
    },
    "contracts/interfaces/PermitInterfaceEIP2612.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface PermitInterfaceEIP2612 is IERC20Metadata {\n    function nonces(address holder) external view returns (uint256 nonce);\n\n    // --- Approve by signature ---\n    function permit(address owner, address spender, uint256 value, uint256 deadline,\n        uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "contracts/interfaces/PermitInterfaceDAI.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface PermitInterfaceDAI is IERC20Metadata {\n    function nonces(address holder) external view returns (uint256 nonce);\n\n    // --- Approve by signature ---\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\n        bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@opengsn/contracts/src/test/TestToken.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestToken is ERC20 {\n\n    constructor() ERC20(\"Test Token\", \"TOK\") {\n        mint(100 ether);\n    }\n\n    function mint(uint256 amount) public {\n        _mint(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/helpers/TestUniswap.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@opengsn/contracts/src/test/TestToken.sol\";\n\nimport \"../interfaces/IUniswapV3.sol\";\n\n// naive, no-calculation swapper.\n//- the exchange rate is fixed at construction\n//- mints new tokens at will...\ncontract TestUniswap is IUniswapV3 {\n    IERC20 public token;\n    uint256 public rateMult;\n    uint256 public rateDiv;\n\n    constructor(uint256 _rateMult, uint256 _rateDiv) payable {\n        token = new TestToken();\n        rateMult = _rateMult;\n        rateDiv = _rateDiv;\n        require(msg.value > 0, \"must specify liquidity\");\n        require(rateMult != 0 && rateDiv != 0, \"bad mult,div\");\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    function tokenAddress() external override view returns (address out) {\n        return address(token);\n    }\n\n    function tokenToEthSwapOutput(uint256 ethBought, uint256 maxTokens, uint256 deadline) public override returns (uint256 out) {\n        (maxTokens, deadline);\n        uint256 tokensToSell = getTokenToEthOutputPrice(ethBought);\n        require(address(this).balance > ethBought, \"not enough liquidity\");\n\n        token.transferFrom(msg.sender, address(this), tokensToSell);\n        payable(msg.sender).transfer(ethBought);\n        return tokensToSell;\n    }\n\n    function getTokenToEthInputPrice(uint256 tokensSold) external override view returns (uint256 out) {\n        return tokensSold * rateDiv / rateMult;\n    }\n\n    function tokenToEthTransferOutput(uint256 ethBought, uint256 maxTokens, uint256 deadline, address payable recipient) external override returns (uint256 out) {\n        (maxTokens, deadline, recipient);\n        require(address(this).balance > ethBought, \"not enough liquidity\");\n\n        uint256 tokensToSell = getTokenToEthOutputPrice(ethBought);\n\n        token.transferFrom(msg.sender, address(this), tokensToSell);\n        recipient.transfer(ethBought);\n        return tokensToSell;\n    }\n\n    function getTokenToEthOutputPrice(uint256 ethBought) public override view returns (uint256 out) {\n        return ethBought * rateMult / rateDiv;\n    }\n\n    function exactInputSingle(ExactInputSingleParams calldata) external override payable returns (uint256 amountOut) {\n        revert(\"No swap for you\");\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function unwrapWETH9(uint256, address) external payable {}\n}\n"
    },
    "contracts/interfaces/IUniswapV3.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\n\n//minimal uniswap we need:\ninterface IUniswapV3 {\n    function tokenAddress() external view returns (address);\n\n    function tokenToEthSwapOutput(uint256 ethBought, uint256 maxTokens, uint256 deadline) external returns (uint256 out);\n\n    function tokenToEthTransferOutput(uint256 ethBought, uint256 maxTokens, uint256 deadline, address payable recipient) external returns (uint256 out);\n\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 out);\n\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns (uint256 out);\n\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n}\n"
    },
    "contracts/TokenPaymaster.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"@opengsn/contracts/src/forwarder/IForwarder.sol\";\nimport \"@opengsn/contracts/src/BasePaymaster.sol\";\n\nimport \"./interfaces/IUniswapV3.sol\";\n\n/**\n * A Token-based paymaster.\n * - each request is paid for by the caller.\n * - acceptRelayedCall - verify the caller can pay for the request in tokens.\n * - preRelayedCall - pre-pay the maximum possible price for the tx\n * - postRelayedCall - refund the caller for the unused gas\n */\ncontract TokenPaymaster is BasePaymaster {\n\n    function versionPaymaster() external override virtual view returns (string memory){\n        return \"3.0.0-beta.3+opengsn.token.ipaymaster\";\n    }\n\n\n    IUniswapV3[] public uniswaps;\n    IERC20[] public tokens;\n\n    mapping (IUniswapV3=>bool ) private supportedUniswaps;\n\n    uint256 public gasUsedByPost;\n\n    constructor(IUniswapV3[] memory _uniswaps) {\n        uniswaps = _uniswaps;\n\n        for (uint256 i = 0; i < _uniswaps.length; i++){\n            supportedUniswaps[_uniswaps[i]] = true;\n            tokens.push(IERC20(_uniswaps[i].tokenAddress()));\n            tokens[i].approve(address(_uniswaps[i]), type(uint256).max);\n        }\n    }\n\n    /**\n     * set gas used by postRelayedCall, for proper gas calculation.\n     * You can use TokenGasCalculator to calculate these values (they depend on actual code of postRelayedCall,\n     * but also the gas usage of the token and of Uniswap)\n     */\n    function setPostGasUsage(uint256 _gasUsedByPost) external onlyOwner {\n        gasUsedByPost = _gasUsedByPost;\n    }\n\n    // return the payer of this request.\n    // for account-based target, this is the target account.\n    function getPayer(GsnTypes.RelayRequest calldata relayRequest) public virtual view returns (address) {\n        (this);\n        return relayRequest.request.to;\n    }\n\n    event Received(uint256 eth);\n    receive() external override payable {\n        emit Received(msg.value);\n    }\n\n    function _getToken(bytes memory paymasterData) internal view returns (IERC20 token, IUniswapV3 uniswap) {\n        uniswap = abi.decode(paymasterData, (IUniswapV3));\n        require(supportedUniswaps[uniswap], \"unsupported token uniswap\");\n        token = IERC20(uniswap.tokenAddress());\n    }\n\n    function _calculatePreCharge(\n        IERC20 token,\n        IUniswapV3 uniswap,\n        GsnTypes.RelayRequest calldata relayRequest,\n        uint256 maxPossibleGas)\n    internal\n    view\n    returns (address payer, uint256 tokenPreCharge) {\n        (token);\n        payer = this.getPayer(relayRequest);\n        uint256 ethMaxCharge = relayHub.calculateCharge(maxPossibleGas, relayRequest.relayData);\n        ethMaxCharge += relayRequest.request.value;\n        tokenPreCharge = uniswap.getTokenToEthOutputPrice(ethMaxCharge);\n    }\n\n    function _verifyPaymasterData(GsnTypes.RelayRequest calldata relayRequest) internal virtual override view {\n        // solhint-disable-next-line reason-string\n        require(relayRequest.relayData.paymasterData.length == 32, \"paymasterData: invalid length for Uniswap v3 exchange address\");\n    }\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    virtual\n    returns (bytes memory context, bool revertOnRecipientRevert) {\n        (signature, approvalData);\n\n        (IERC20 token, IUniswapV3 uniswap) = _getToken(relayRequest.relayData.paymasterData);\n        (address payer, uint256 tokenPrecharge) = _calculatePreCharge(token, uniswap, relayRequest, maxPossibleGas);\n        token.transferFrom(payer, address(this), tokenPrecharge);\n        return (abi.encode(payer, tokenPrecharge, token, uniswap), false);\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    virtual\n    {\n        (address payer, uint256 tokenPrecharge, IERC20 token, IUniswapV3 uniswap) = abi.decode(context, (address, uint256, IERC20, IUniswapV3));\n        _postRelayedCallInternal(payer, tokenPrecharge, 0, gasUseWithoutPost, relayData, token, uniswap);\n    }\n\n    function _postRelayedCallInternal(\n        address payer,\n        uint256 tokenPrecharge,\n        uint256 valueRequested,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData,\n        IERC20 token,\n        IUniswapV3 uniswap\n    ) internal {\n        uint256 ethActualCharge = relayHub.calculateCharge(gasUseWithoutPost + gasUsedByPost, relayData);\n        uint256 tokenActualCharge = uniswap.getTokenToEthOutputPrice(valueRequested + ethActualCharge);\n        uint256 tokenRefund = tokenPrecharge - tokenActualCharge;\n        _refundPayer(payer, token, tokenRefund);\n        _depositProceedsToHub(ethActualCharge, uniswap);\n        emit TokensCharged(gasUseWithoutPost, gasUsedByPost, ethActualCharge, tokenActualCharge);\n    }\n\n    function _refundPayer(\n        address payer,\n        IERC20 token,\n        uint256 tokenRefund\n    ) private {\n        require(token.transfer(payer, tokenRefund), \"failed refund\");\n    }\n\n    function _depositProceedsToHub(uint256 ethActualCharge, IUniswapV3 uniswap) private {\n        //solhint-disable-next-line\n        uniswap.tokenToEthSwapOutput(ethActualCharge, type(uint256).max, block.timestamp+60*15);\n        relayHub.depositFor{value:ethActualCharge}(address(this));\n    }\n\n    event TokensCharged(uint256 gasUseWithoutPost, uint256 gasJustPost, uint256 ethActualCharge, uint256 tokenActualCharge);\n}\n"
    },
    "@opengsn/contracts/src/test/TestPaymasterEverythingAccepted.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"../forwarder/IForwarder.sol\";\nimport \"../BasePaymaster.sol\";\n\ncontract TestPaymasterEverythingAccepted is BasePaymaster {\n\n    function versionPaymaster() external view override virtual returns (string memory){\n        return \"3.0.0-beta.3+opengsn.test-pea.ipaymaster\";\n    }\n\n    event SampleRecipientPreCall();\n    event SampleRecipientPostCall(bool success, uint256 actualCharge);\n\n    // solhint-disable-next-line no-empty-blocks\n    function _verifyValue(GsnTypes.RelayRequest calldata) internal override view{}\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    virtual\n    returns (bytes memory, bool) {\n        (relayRequest, signature);\n        (approvalData, maxPossibleGas);\n        emit SampleRecipientPreCall();\n        return (\"no revert here\",false);\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    virtual\n    {\n        (context, gasUseWithoutPost, relayData);\n        emit SampleRecipientPostCall(success, gasUseWithoutPost);\n    }\n\n    function deposit() public payable {\n        require(address(relayHub) != address(0), \"relay hub address not set\");\n        relayHub.depositFor{value:msg.value}(address(this));\n    }\n\n    function withdrawAll(address payable destination) public {\n        uint256 amount = relayHub.balanceOf(address(this));\n        withdrawRelayHubDepositTo(amount, destination);\n    }\n}\n"
    },
    "@opengsn/contracts/src/test/TestPaymasterConfigurableMisbehavior.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./TestPaymasterEverythingAccepted.sol\";\n\ncontract TestPaymasterConfigurableMisbehavior is TestPaymasterEverythingAccepted {\n\n    bool public withdrawDuringPostRelayedCall;\n    bool public withdrawDuringPreRelayedCall;\n    bool public returnInvalidErrorCode;\n    bool public revertPostRelayCall;\n    bool public outOfGasPre;\n    bool public revertPreRelayCall;\n    bool public revertPreRelayCallOnEvenBlocks;\n    bool public greedyAcceptanceBudget;\n    bool public expensiveGasLimits;\n\n    function setWithdrawDuringPostRelayedCall(bool val) public {\n        withdrawDuringPostRelayedCall = val;\n    }\n    function setWithdrawDuringPreRelayedCall(bool val) public {\n        withdrawDuringPreRelayedCall = val;\n    }\n    function setReturnInvalidErrorCode(bool val) public {\n        returnInvalidErrorCode = val;\n    }\n    function setRevertPostRelayCall(bool val) public {\n        revertPostRelayCall = val;\n    }\n    function setRevertPreRelayCall(bool val) public {\n        revertPreRelayCall = val;\n    }\n    function setRevertPreRelayCallOnEvenBlocks(bool val) public {\n        revertPreRelayCallOnEvenBlocks = val;\n    }\n    function setOutOfGasPre(bool val) public {\n        outOfGasPre = val;\n    }\n\n    function setGreedyAcceptanceBudget(bool val) public {\n        greedyAcceptanceBudget = val;\n    }\n    function setExpensiveGasLimits(bool val) public {\n        expensiveGasLimits = val;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function _verifyApprovalData(bytes calldata approvalData) internal virtual override view {}\n\n    // solhint-disable-next-line no-empty-blocks\n    function _verifyPaymasterData(GsnTypes.RelayRequest calldata relayRequest) internal virtual override view {}\n\n    // solhint-disable reason-string\n    // contains comments that are checked in tests\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    returns (bytes memory, bool) {\n        (relayRequest, signature, approvalData, maxPossibleGas);\n        if (outOfGasPre) {\n            uint256 i = 0;\n            while (true) {\n                i++;\n            }\n        }\n\n        require(!returnInvalidErrorCode, \"invalid code\");\n\n        if (withdrawDuringPreRelayedCall) {\n            withdrawAllBalance();\n        }\n        if (revertPreRelayCall) {\n            revert(\"You asked me to revert, remember?\");\n        }\n        if (revertPreRelayCallOnEvenBlocks && block.number % 2 == 0) {\n            revert(\"You asked me to revert on even blocks, remember?\");\n        }\n        return (\"\", trustRecipientRevert);\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    {\n        (context, success, gasUseWithoutPost, relayData);\n        if (withdrawDuringPostRelayedCall) {\n            withdrawAllBalance();\n        }\n        if (revertPostRelayCall) {\n            revert(\"You asked me to revert, remember?\");\n        }\n    }\n\n    /// leaving withdrawal public and unprotected\n    function withdrawAllBalance() public returns (uint256) {\n        require(address(relayHub) != address(0), \"relay hub address not set\");\n        uint256 balance = relayHub.balanceOf(address(this));\n        relayHub.withdraw(payable(address(this)), balance);\n        return balance;\n    }\n\n    IPaymaster.GasAndDataLimits private limits = super.getGasAndDataLimits();\n\n    function getGasAndDataLimits()\n    public override view\n    returns (IPaymaster.GasAndDataLimits memory) {\n\n        if (expensiveGasLimits) {\n            uint256 sum;\n            //memory access is 700gas, so we waste ~50000\n            for ( int i=0; i<100000; i+=700 ) {\n                sum  = sum + limits.acceptanceBudget;\n            }\n        }\n        if (greedyAcceptanceBudget) {\n            return IPaymaster.GasAndDataLimits(limits.acceptanceBudget * 9, limits.preRelayedCallGasLimit, limits.postRelayedCallGasLimit,\n            limits.calldataSizeLimit);\n        }\n        return limits;\n    }\n\n    bool private trustRecipientRevert;\n\n    function setGasLimits(uint256 acceptanceBudget, uint256 preRelayedCallGasLimit, uint256 postRelayedCallGasLimit) public {\n        limits = IPaymaster.GasAndDataLimits(\n            acceptanceBudget,\n            preRelayedCallGasLimit,\n            postRelayedCallGasLimit,\n            limits.calldataSizeLimit\n        );\n    }\n\n    function setTrustRecipientRevert(bool on) public {\n        trustRecipientRevert = on;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external override payable {}\n}\n"
    },
    "@opengsn/contracts/src/test/TestRecipient.sol": {
      "content": "/* solhint-disable avoid-tx-origin */\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../utils/GsnUtils.sol\";\nimport \"../ERC2771Recipient.sol\";\nimport \"./TestPaymasterConfigurableMisbehavior.sol\";\n\ncontract TestRecipient is ERC2771Recipient {\n\n    constructor(address forwarder) {\n        _setTrustedForwarder(forwarder);\n    }\n\n    // testing inner call gas estimation\n    uint256 private nothing1;\n    uint256 private nothing2;\n    uint256 private nothing3;\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        nothing1 = type(uint256).max;\n        nothing2 = type(uint256).max;\n        nothing3 = type(uint256).max;\n    }\n\n    event Reverting(string message);\n\n    function testRevert() public {\n        require(address(this) == address(0), \"always fail\");\n        emit Reverting(\"if you see this revert failed...\");\n    }\n\n    address payable public paymaster;\n\n    function setWithdrawDuringRelayedCall(address payable _paymaster) public {\n        paymaster = _paymaster;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    event SampleRecipientEmitted(string message, address realSender, address msgSender, address origin, uint256 msgValue, uint256 gasLeft, uint256 balance);\n\n    function recipientRevert() public {\n        revert(\"this method reverts consistently\");\n    }\n\n    function emitMessage(string memory message) public payable returns (string memory) {\n        uint256 gasLeft = gasleft();\n        if (paymaster != address(0)) {\n            withdrawAllBalance();\n        }\n\n        emit SampleRecipientEmitted(message, _msgSender(), msg.sender, tx.origin, msg.value, gasLeft, address(this).balance);\n        return \"emitMessage return value\";\n    }\n\n    function withdrawAllBalance() public {\n        TestPaymasterConfigurableMisbehavior(paymaster).withdrawAllBalance();\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function dontEmitMessage(string calldata message) public {}\n\n    function emitMessageNoParams() public {\n        emit SampleRecipientEmitted(\"Method with no parameters\", _msgSender(), msg.sender, tx.origin, 0, gasleft(), address(this).balance);\n    }\n\n    //return (or revert) with a string in the given length\n    function checkReturnValues(uint256 len, bool doRevert) public view returns (string memory) {\n        (this);\n        string memory mesg = \"this is a long message that we are going to return a small part from. we don't use a loop since we want a fixed gas usage of the method itself.\";\n        require( bytes(mesg).length>=len, \"invalid len: too large\");\n\n        /* solhint-disable no-inline-assembly */\n        //cut the msg at that length\n        assembly { mstore(mesg, len) }\n        require(!doRevert, mesg);\n        return mesg;\n    }\n\n    //function with no return value (also test revert with no msg.\n    function checkNoReturnValues(bool doRevert) public view {\n        (this);\n        /* solhint-disable reason-string*/\n        require(!doRevert);\n    }\n\n    function withdrawFromSingletonWhitelistPaymaster(address payable singletonPaymaster) public {\n        TestRecipient(singletonPaymaster).withdrawBalance(1);\n    }\n\n    // only here for one method sig\n    // solhint-disable-next-line no-empty-blocks\n    function withdrawBalance(uint256 amount) public {}\n}\n"
    },
    "contracts/helpers/ImportsArtifacts.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n//\"import\" it into our project for Truffle to generate artifacts\nimport \"@opengsn/contracts/src/forwarder/IForwarder.sol\";\nimport \"@opengsn/contracts/src/forwarder/Forwarder.sol\";\nimport \"@opengsn/contracts/src/StakeManager.sol\";\nimport \"@opengsn/contracts/src/Penalizer.sol\";\nimport \"@opengsn/contracts/src/utils/RelayRegistrar.sol\";\nimport \"@opengsn/contracts/src/test/TestRecipient.sol\";\n\nimport \"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\";\n"
    },
    "@opengsn/contracts/src/forwarder/Forwarder.sol": {
      "content": "// solhint-disable not-rely-on-time\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n// #if ENABLE_CONSOLE_LOG\nimport \"hardhat/console.sol\";\n// #endif\n\nimport \"./IForwarder.sol\";\n\n/**\n * @title The Forwarder Implementation\n * @notice This implementation of the `IForwarder` interface uses ERC-712 signatures and stored nonces for verification.\n */\ncontract Forwarder is IForwarder, ERC165 {\n    using ECDSA for bytes32;\n\n    address private constant DRY_RUN_ADDRESS = 0x0000000000000000000000000000000000000000;\n\n    string public constant GENERIC_PARAMS = \"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime\";\n\n    string public constant EIP712_DOMAIN_TYPE = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\n\n    mapping(bytes32 => bool) public typeHashes;\n    mapping(bytes32 => bool) public domains;\n\n    // Nonces of senders, used to prevent replay attacks\n    mapping(address => uint256) private nonces;\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    /// @inheritdoc IForwarder\n    function getNonce(address from)\n    public view override\n    returns (uint256) {\n        return nonces[from];\n    }\n\n    constructor() {\n        string memory requestType = string(abi.encodePacked(\"ForwardRequest(\", GENERIC_PARAMS, \")\"));\n        registerRequestTypeInternal(requestType);\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IForwarder).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IForwarder\n    function verify(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig)\n    external override view {\n        _verifyNonce(req);\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n    }\n\n    /// @inheritdoc IForwarder\n    function execute(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig\n    )\n    external payable\n    override\n    returns (bool success, bytes memory ret) {\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n        _verifyAndUpdateNonce(req);\n\n        require(req.validUntilTime == 0 || req.validUntilTime > block.timestamp, \"FWD: request expired\");\n\n        uint256 gasForTransfer = 0;\n        if ( req.value != 0 ) {\n            gasForTransfer = 40000; //buffer in case we need to move eth after the transaction.\n        }\n        bytes memory callData = abi.encodePacked(req.data, req.from);\n        require(gasleft()*63/64 >= req.gas + gasForTransfer, \"FWD: insufficient gas\");\n        // solhint-disable-next-line avoid-low-level-calls\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(callData);\n\n        // #if ENABLE_CONSOLE_LOG\n        console.log(\"execute result: success: %s ret:\", success);\n        console.logBytes(ret);\n        // #endif\n\n        if ( req.value != 0 && address(this).balance>0 ) {\n            // can't fail: req.from signed (off-chain) the request, so it must be an EOA...\n            payable(req.from).transfer(address(this).balance);\n        }\n\n        return (success,ret);\n    }\n\n    function _verifyNonce(ForwardRequest calldata req) internal view {\n        require(nonces[req.from] == req.nonce, \"FWD: nonce mismatch\");\n    }\n\n    function _verifyAndUpdateNonce(ForwardRequest calldata req) internal {\n        require(nonces[req.from]++ == req.nonce, \"FWD: nonce mismatch\");\n    }\n\n    /// @inheritdoc IForwarder\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\n\n        for (uint256 i = 0; i < bytes(typeName).length; i++) {\n            bytes1 c = bytes(typeName)[i];\n            require(c != \"(\" && c != \")\", \"FWD: invalid typename\");\n        }\n\n        string memory requestType = string(abi.encodePacked(typeName, \"(\", GENERIC_PARAMS, \",\", typeSuffix));\n        registerRequestTypeInternal(requestType);\n    }\n\n    /// @inheritdoc IForwarder\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\n        uint256 chainId;\n        /* solhint-disable-next-line no-inline-assembly */\n        assembly { chainId := chainid() }\n\n        bytes memory domainValue = abi.encode(\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\n            keccak256(bytes(name)),\n            keccak256(bytes(version)),\n            chainId,\n            address(this));\n\n        bytes32 domainHash = keccak256(domainValue);\n\n        domains[domainHash] = true;\n        emit DomainRegistered(domainHash, domainValue);\n    }\n\n    function registerRequestTypeInternal(string memory requestType) internal {\n\n        bytes32 requestTypehash = keccak256(bytes(requestType));\n        typeHashes[requestTypehash] = true;\n        emit RequestTypeRegistered(requestTypehash, requestType);\n    }\n\n    function _verifySig(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig)\n    internal\n    virtual\n    view\n    {\n        require(domains[domainSeparator], \"FWD: unregistered domain sep.\");\n        require(typeHashes[requestTypeHash], \"FWD: unregistered typehash\");\n        bytes32 digest = keccak256(abi.encodePacked(\n                \"\\x19\\x01\", domainSeparator,\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\n            ));\n        // solhint-disable-next-line avoid-tx-origin\n        require(tx.origin == DRY_RUN_ADDRESS || digest.recover(sig) == req.from, \"FWD: signature mismatch\");\n    }\n\n    /**\n     * @notice Creates a byte array that is a valid ABI encoding of a request of a `RequestType` type. See `execute()`.\n     */\n    function _getEncoded(\n        ForwardRequest calldata req,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData\n    )\n    public\n    pure\n    returns (\n        bytes memory\n    ) {\n        // we use encodePacked since we append suffixData as-is, not as dynamic param.\n        // still, we must make sure all first params are encoded as abi.encode()\n        // would encode them - as 256-bit-wide params.\n        return abi.encodePacked(\n            requestTypeHash,\n            uint256(uint160(req.from)),\n            uint256(uint160(req.to)),\n            req.value,\n            req.gas,\n            req.nonce,\n            keccak256(req.data),\n            req.validUntilTime,\n            suffixData\n        );\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountIn The desired input amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountOut The desired output amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountIn);\n}\n"
    },
    "contracts/deployproxy/ProxyDeployingPaymaster.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../TokenPaymaster.sol\";\nimport \"./ProxyFactory.sol\";\n\ncontract ProxyDeployingPaymaster is TokenPaymaster {\n    using Address for address;\n\n    string public override versionPaymaster = \"3.0.0-beta.3+opengsn.proxydeploying.ipaymaster\";\n\n    ProxyFactory public proxyFactory;\n\n    constructor(IUniswapV3[] memory _uniswaps, ProxyFactory _proxyFactory) TokenPaymaster(_uniswaps)  {\n        proxyFactory = _proxyFactory;\n    }\n\n    function getPayer(GsnTypes.RelayRequest calldata relayRequest) public override virtual view returns (address) {\n        // TODO: if (rr.paymasterData != '') return address(rr.paymasterData)\n        //  this is to support pre-existing proxies/proxies with changed owner\n        return proxyFactory.calculateAddress(relayRequest.request.from);\n    }\n\n\n    /**\n     * @notice unlike the default implementation we need to allow destination address to have no code deployed yet\n     */\n    function _verifyForwarder(GsnTypes.RelayRequest calldata relayRequest)\n    internal\n    virtual\n    override\n    view\n    {\n        require(getTrustedForwarder() == relayRequest.relayData.forwarder, \"Forwarder is not trusted\");\n        if (relayRequest.request.to.isContract()){\n            GsnEip712Library.verifyForwarderTrusted(relayRequest);\n        }\n    }\n\n    function _verifyPaymasterData(GsnTypes.RelayRequest calldata relayRequest) internal virtual override view {\n        // solhint-disable-next-line reason-string\n        require(relayRequest.relayData.paymasterData.length == 32, \"paymasterData: invalid length for Uniswap v1 exchange address\");\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function _verifyValue(GsnTypes.RelayRequest calldata relayRequest) internal virtual override view {}\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    virtual\n    returns (bytes memory, bool revertOnRecipientRevert) {\n        (signature, approvalData);\n\n        (IERC20 token, IUniswapV3 uniswap) = _getToken(relayRequest.relayData.paymasterData);\n        (address payer, uint256 tokenPrecharge) = _calculatePreCharge(token, uniswap, relayRequest, maxPossibleGas);\n        if (!payer.isContract()) {\n            deployProxy(relayRequest.request.from);\n        }\n        token.transferFrom(payer, address(this), tokenPrecharge);\n        //solhint-disable-next-line\n        uniswap.tokenToEthSwapOutput(relayRequest.request.value, type(uint256).max, block.timestamp + 60 * 15);\n        payable(relayRequest.relayData.forwarder).transfer(relayRequest.request.value);\n        return (abi.encode(payer, relayRequest.request.from, tokenPrecharge, relayRequest.request.value, relayRequest.relayData.forwarder, token, uniswap), false);\n    }\n\n    function deployProxy(address owner) public returns (ProxyIdentity) {\n        ProxyIdentity proxy = proxyFactory.deployProxy(owner);\n        proxy.initialize(address(getTrustedForwarder()), tokens);\n        return proxy;\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    virtual {\n        (address payer,, uint256 tokenPrecharge, uint256 valueRequested,,IERC20 token, IUniswapV3 uniswap) = abi.decode(context, (address, address, uint256, uint256, address, IERC20, IUniswapV3));\n        _postRelayedCallInternal(payer, tokenPrecharge, valueRequested, gasUseWithoutPost, relayData, token, uniswap);\n    }\n\n    // TODO: calculate precise values for these params\n    uint256 constant private PRE_RELAYED_CALL_GAS_LIMIT_OVERRIDE = 2000000;\n    uint256 constant public PAYMASTER_ACCEPTANCE_BUDGET_OVERRIDE = PRE_RELAYED_CALL_GAS_LIMIT_OVERRIDE + FORWARDER_HUB_OVERHEAD;\n\n    function getGasAndDataLimits()\n    public\n    override\n    pure\n    returns (\n        GasAndDataLimits memory limits\n    ) {\n        return GasAndDataLimits(\n            PAYMASTER_ACCEPTANCE_BUDGET_OVERRIDE,\n            PRE_RELAYED_CALL_GAS_LIMIT_OVERRIDE,\n            POST_RELAYED_CALL_GAS_LIMIT,\n            CALLDATA_SIZE_LIMIT\n        );\n    }\n}\n"
    },
    "contracts/deployproxy/ProxyFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./ProxyIdentity.sol\";\n\ncontract  ProxyFactory {\n    using Address for address;\n\n    event ProxyDeployed(address proxyAddress);\n\n    function calculateAddress(address owner) public view returns (address){\n        return address(uint160(uint256(keccak256(\n                abi.encodePacked(\n                    uint8(0xff),\n                    address(this),\n                    bytes32(0),\n                    keccak256(abi.encodePacked(type(ProxyIdentity).creationCode, abi.encode(owner)))\n                )))));\n    }\n\n    function deployProxy(address owner) external returns (ProxyIdentity) {\n        address calculatedAddress = calculateAddress(owner);\n        if (!calculatedAddress.isContract()) {\n            ProxyIdentity proxyIdentity = new ProxyIdentity{salt: 0}(owner);\n            require(calculatedAddress == address(proxyIdentity), \"FATAL: create2 wrong address\");\n            emit ProxyDeployed(calculatedAddress);\n        }\n        return ProxyIdentity(payable(calculatedAddress));\n    }\n}\n"
    },
    "contracts/deployproxy/ProxyIdentity.sol": {
      "content": "/* solhint-disable no-inline-assembly */\n// SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@opengsn/contracts/src/ERC2771Recipient.sol\";\n\nimport \"../interfaces/IERC725.sol\";\n\ncontract ProxyIdentity is IERC725, ERC2771Recipient, Initializable {\n\n    uint256 private constant OPERATION_CALL = 0;\n    uint256 private constant OPERATION_CREATE = 1;\n\n    address public override owner;\n\n    mapping(bytes32 => bytes) override public getData;\n\n    // solhint-disable-next-line no-empty-blocks\n    receive () external payable {}\n\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    function initialize(address _trustedForwarder, IERC20[] calldata tokens) external initializer {\n        _setTrustedForwarder(_trustedForwarder);\n        for (uint256 i =0; i < tokens.length; i++){\n            tokens[i].approve(address(msg.sender), type(uint256).max);\n        }\n    }\n\n    modifier onlyOwner() {\n        require(_msgSender() == owner, \"ProxyIdentity: caller not owner\");\n        _;\n    }\n\n    function changeOwner(address)\n        external\n        view\n        override\n        onlyOwner\n    {\n        revert(\"not supported\");\n        /*\n        owner = _owner;\n        emit OwnerChanged(owner);\n        */\n    }\n\n    function setData(bytes32, bytes calldata)\n    external\n    view\n    override\n    onlyOwner\n    {\n        revert(\"not supported\");\n        /*\n        getData[_key] = _value;\n        emit DataChanged(_key, _value);\n        */\n    }\n\n    function execute(uint256 _operationType, address _to, uint256 _value, bytes calldata _data)\n        external\n        payable\n        override\n        onlyOwner\n    {\n        if (_operationType == OPERATION_CALL) {\n            require(executeCall(_to, _value, _data), \"executeCall failed\");\n        } else if (_operationType == OPERATION_CREATE) {\n            address newContract = executeCreate(_data);\n            emit ContractCreated(newContract);\n        } else {\n            revert(\"not supported\");\n        }\n    }\n\n    function executeCall(address to, uint256 value, bytes memory data)\n        internal\n        returns (bool success)\n    {\n        // solhint-disable-next-line avoid-low-level-calls\n        (success,) = to.call{value: value}(data);\n    }\n\n    function executeCreate(bytes memory)\n        internal\n        pure\n        returns (address /*newContract*/)\n    {\n        revert(\"not supported\");\n    /*\n        assembly {\n            newContract := create(0, add(data, 0x20), mload(data))\n        }\n    */\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC725.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC725 {\n    event DataChanged(bytes32 indexed key, bytes indexed value);\n    event OwnerChanged(address indexed ownerAddress);\n    event ContractCreated(address indexed contractAddress);\n\n    function owner() external view returns (address);\n\n    function changeOwner(address _owner) external;\n\n    function getData(bytes32 _key) external view returns (bytes memory _value);\n\n    function setData(bytes32 _key, bytes calldata _value) external;\n\n    function execute(uint256 _operationType, address _to, uint256 _value, bytes calldata _data) external payable;\n}\n"
    },
    "contracts/helpers/SampleRecipient.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@opengsn/contracts/src/ERC2771Recipient.sol\";\n\n// pass-through paymaster.\n// should override it and re-implement acceptRelayedCall. use \"super\" on success\ncontract SampleRecipient is ERC2771Recipient {\n\n    event Sender( address _msgSenderFunc, address sender );\n\n    function setForwarder(address forwarder) public {\n        _setTrustedForwarder(forwarder);\n    }\n\n    function something() public {\n        emit Sender( _msgSender(), msg.sender );\n    }\n\n    function nothing() public {\n        emit Sender( _msgSender(), msg.sender );\n    }\n}\n"
    },
    "contracts/SingletonWhitelistPaymaster.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@opengsn/contracts/src/BasePaymaster.sol\";\n\n/**\n * This Paymaster allows the dapp owners to maintain a simple set of rules on-chain for their GSN integrations.\n * Supports enabling specified target contracts (Recipients), senders and methods (per target) to be subsidized.\n * Unlike 'VerifyingPaymaster' doesn't require any server-side code but also does not provide any additional protection.\n */\ncontract SingletonWhitelistPaymaster is BasePaymaster {\n\n    struct DappInformation {\n        uint256 balance;\n        bool useSenderWhitelist;\n        bool useTargetWhitelist;\n        bool useMethodWhitelist;\n        mapping(address => bool) senderWhitelist;\n        mapping(address => bool) targetWhitelist;\n        mapping(address => mapping(bytes4 => bool)) methodWhitelist;\n    }\n\n    event WhitelistedTargets(address indexed dappOwner, uint256 count);\n    event WhitelistedSenders(address indexed dappOwner, uint256 count);\n    event WhitelistedMethodsForTarget(address indexed dappOwner, address indexed target, uint256 count);\n\n    event Received(address dappOwner, uint256 amount, uint256 balance);\n    event Withdrawn(address dappOwner, uint256 amount, uint256 balance);\n    event AdminOverrideWithdrawn(address destination, uint256 amount);\n    event SharedConfigChanged(uint256 gasUsedByPost, uint256 paymasterFee);\n    event DappConfigChanged(address indexed dappOwner, bool useSenderWhitelist, bool useTargetWhitelist, bool useMethodWhitelist);\n    event PostRelayedCall(address indexed dappOwner, uint256 gasUseWithoutPost, uint256 totalCharge, uint256 paymasterCharge);\n\n    mapping(address => DappInformation) public registeredDapps;\n    uint256 public gasUsedByPost;\n    uint256 public paymasterFee;\n\n    // Custom reentrancy guard as we want to cover 3 methods: 'preRelayedCall', 'withdrawBalance' and 'postRelayedCall'\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n    uint256 private status = NOT_ENTERED;\n\n    function versionPaymaster() external view override virtual returns (string memory){\n        return \"3.0.0-beta.3+opengsn.singleton-whitelist.ipaymaster\";\n    }\n\n    function whitelistSenders(address[] memory senders, bool isAllowed) external {\n        address dappOwner = msg.sender;\n        for (uint i = 0; i < senders.length; i++) {\n            registeredDapps[dappOwner].senderWhitelist[senders[i]] = isAllowed;\n        }\n        emit WhitelistedSenders(dappOwner, senders.length);\n    }\n\n    function whitelistTargets(address[] memory targets, bool isAllowed) external {\n        address dappOwner = msg.sender;\n        for (uint i = 0; i < targets.length; i++) {\n            registeredDapps[dappOwner].targetWhitelist[targets[i]] = isAllowed;\n        }\n        emit WhitelistedTargets(dappOwner, targets.length);\n    }\n\n    function whitelistMethodsForTarget(address target, bytes4[] memory methods, bool isAllowed) external {\n        address dappOwner = msg.sender;\n        for (uint i = 0; i < methods.length; i++) {\n            registeredDapps[dappOwner].methodWhitelist[target][methods[i]] = isAllowed;\n        }\n        emit WhitelistedMethodsForTarget(dappOwner, target, methods.length);\n    }\n\n    function setSharedConfiguration(uint256 _gasUsedByPost, uint256 _paymasterFee) external onlyOwner {\n        gasUsedByPost = _gasUsedByPost;\n        paymasterFee = _paymasterFee;\n        emit SharedConfigChanged(gasUsedByPost, paymasterFee);\n    }\n\n    function setDappConfiguration(\n        bool _useSenderWhitelist,\n        bool _useTargetWhitelist,\n        bool _useMethodWhitelist\n    ) external {\n        DappInformation storage dappInfo = registeredDapps[msg.sender];\n        dappInfo.useSenderWhitelist = _useSenderWhitelist;\n        dappInfo.useTargetWhitelist = _useTargetWhitelist;\n        dappInfo.useMethodWhitelist = _useMethodWhitelist;\n        emit DappConfigChanged(msg.sender, _useSenderWhitelist, _useTargetWhitelist, _useMethodWhitelist);\n    }\n\n    function _verifyPaymasterData(GsnTypes.RelayRequest calldata relayRequest) internal virtual override view {\n        require(relayRequest.relayData.paymasterData.length == 32, \"paymasterData: invalid length\");\n    }\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    virtual\n    returns (bytes memory context, bool revertOnRecipientRevert) {\n        (signature, approvalData, maxPossibleGas);\n        status = ENTERED;\n        address dappOwner = abi.decode(relayRequest.relayData.paymasterData, (address));\n        DappInformation storage targetConfiguration = registeredDapps[dappOwner];\n        if (!(targetConfiguration.useSenderWhitelist\n        || targetConfiguration.useTargetWhitelist\n        || targetConfiguration.useMethodWhitelist)\n        ) {\n            revert(\"turning off checks is forbidden\");\n        }\n\n        uint256 maxPossibleCharge = relayHub.calculateCharge(maxPossibleGas, relayRequest.relayData);\n        uint256 totalMaxPossibleCharge = addPaymasterFee(maxPossibleCharge);\n        require(registeredDapps[dappOwner].balance >= totalMaxPossibleCharge, \"insufficient balance for charge\");\n\n        if (targetConfiguration.useSenderWhitelist) {\n            address sender = relayRequest.request.from;\n            require(targetConfiguration.senderWhitelist[sender], \"sender not whitelisted\");\n        }\n        if (targetConfiguration.useTargetWhitelist) {\n            address target = relayRequest.request.to;\n            require(targetConfiguration.targetWhitelist[target], \"target not whitelisted\");\n        }\n        if (targetConfiguration.useMethodWhitelist) {\n            address target = relayRequest.request.to;\n            bytes4 method = GsnUtils.getMethodSig(relayRequest.request.data);\n            require(targetConfiguration.methodWhitelist[target][method], \"method not whitelisted\");\n        }\n\n        return (relayRequest.relayData.paymasterData, true);\n    }\n\n    function isSenderWhitelistedForDappOwner(\n        address dappOwner,\n        address sender\n    )\n    external\n    view\n    returns (bool)\n    {\n        return registeredDapps[dappOwner].senderWhitelist[sender];\n    }\n\n    function isTargetWhitelistedForDappOwner(\n        address dappOwner,\n        address target\n    )\n    external\n    view\n    returns (bool)\n    {\n        return registeredDapps[dappOwner].targetWhitelist[target];\n    }\n\n    function isMethodWhitelistedForTargetAndDappOwner(\n        address dappOwner,\n        address target,\n        bytes4 method\n    )\n    external\n    view\n    returns (bool)\n    {\n        return registeredDapps[dappOwner].methodWhitelist[target][method];\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    virtual {\n        (success);\n        status = NOT_ENTERED;\n        address dappOwner = abi.decode(context, (address));\n        uint256 gasUsed = gasUseWithoutPost + gasUsedByPost;\n        uint256 actualCharge = relayHub.calculateCharge(gasUsed, relayData);\n        uint256 totalCharge = addPaymasterFee(actualCharge);\n        uint256 paymasterCharge = totalCharge - actualCharge;\n        require(registeredDapps[dappOwner].balance >= totalCharge, \"insufficient balance for charge\");\n        registeredDapps[dappOwner].balance -= totalCharge;\n        registeredDapps[owner()].balance += paymasterCharge;\n        emit PostRelayedCall(dappOwner, gasUseWithoutPost, totalCharge, paymasterCharge);\n    }\n\n    // TODO: this is now a shared code. consider extracting to base / library.\n    function addPaymasterFee(uint256 charge) public view returns (uint256) {\n        return charge * (100 + paymasterFee) / 100;\n    }\n\n    receive() external override payable {\n        require(address(relayHub) != address(0), \"relay hub address not set\");\n        relayHub.depositFor{value : msg.value}(address(this));\n        registeredDapps[msg.sender].balance += msg.value;\n        emit Received(msg.sender, msg.value, registeredDapps[msg.sender].balance);\n    }\n\n    function withdrawBalance(uint256 amount) external {\n        require(status != ENTERED, \"withdrawBalance reentrant call\");\n        require(address(relayHub) != address(0), \"relay hub address not set\");\n        require(registeredDapps[msg.sender].balance >= amount, \"dapp owner balance insufficient\");\n        registeredDapps[msg.sender].balance -= amount;\n        relayHub.withdraw(payable(msg.sender), amount);\n        emit Withdrawn(msg.sender, amount, registeredDapps[msg.sender].balance);\n    }\n\n    /// @notice Allows the 'owner' of this Paymaster to extract funds from the RelayHub overriding the depositors.\n    /// @notice This is necessary in case there is a security vulnerability discovered.\n    /// @notice If 'totalCharge' calculation diverges from the RelayHub it would lead to funds being stuck as well.\n    function adminOverrideWithdraw(address destination, uint256 amount) external onlyOwner {\n        relayHub.withdraw(payable(destination), amount);\n        emit AdminOverrideWithdrawn(destination, amount);\n    }\n}\n"
    },
    "contracts/SingleRecipientPaymaster.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@opengsn/contracts/src/BasePaymaster.sol\";\n\n/**\n * a paymaster for a single recipient contract.\n * - reject requests if destination is not the target contract.\n * - reject any request if the target contract reverts.\n */\ncontract SingleRecipientPaymaster is BasePaymaster {\n\n    address public target;\n\n    event TargetChanged(address oldTarget, address newTarget);\n\n    function versionPaymaster() external view override virtual returns (string memory){\n        return \"3.0.0-beta.3+opengsn.recipient.ipaymaster\";\n    }\n\n    function setTarget(address _target) external onlyOwner {\n        emit TargetChanged(target, _target);\n        target=_target;\n    }\n\n    function _preRelayedCall(\n        GsnTypes.RelayRequest calldata relayRequest,\n        bytes calldata signature,\n        bytes calldata approvalData,\n        uint256 maxPossibleGas\n    )\n    internal\n    override\n    virtual\n    returns (bytes memory context, bool revertOnRecipientRevert) {\n        (relayRequest, signature, approvalData, maxPossibleGas);\n        require(relayRequest.request.to==target, \"wrong target\");\n\t//returning \"true\" means this paymaster accepts all requests that\n\t// are not rejected by the recipient contract.\n        return (\"\", true);\n    }\n\n    function _postRelayedCall(\n        bytes calldata context,\n        bool success,\n        uint256 gasUseWithoutPost,\n        GsnTypes.RelayData calldata relayData\n    )\n    internal\n    override\n    virtual {\n        (context, success, gasUseWithoutPost, relayData);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}